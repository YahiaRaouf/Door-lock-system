
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  000043a0  00004434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800162  00800162  00004536  2**0
                  ALLOC
  3 .stab         000036a8  00000000  00000000  00004538  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b8  00000000  00000000  00007be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ae91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cf19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__vector_4>
      14:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__vector_9>
      28:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__vector_10>
      2c:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 12 	call	0x255e	; 0x255e <main>
      8a:	0c 94 ce 21 	jmp	0x439c	; 0x439c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e4       	ldi	r26, 0x4C	; 76
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 21 	jmp	0x42dc	; 0x42dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e4       	ldi	r24, 0x4C	; 76
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 21 	jmp	0x42dc	; 0x42dc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5e 21 	jmp	0x42bc	; 0x42bc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 62 21 	jmp	0x42c4	; 0x42c4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <calcTime>:
 *
 * 					FUNCITON DEFINITIONS
 *
 * ************************************************************/

void calcTime() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 62 01 	lds	r24, 0x0162
     b52:	90 91 63 01 	lds	r25, 0x0163
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 63 01 	sts	0x0163, r25
     b5c:	80 93 62 01 	sts	0x0162, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <newPass>:

void newPass() {
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	c4 5a       	subi	r28, 0xA4	; 164
     b74:	d0 40       	sbci	r29, 0x00	; 0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61

	uint8 count_key = 0, key = 0;
     b80:	fe 01       	movw	r30, r28
     b82:	ec 55       	subi	r30, 0x5C	; 92
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1
     b88:	fe 01       	movw	r30, r28
     b8a:	ed 55       	subi	r30, 0x5D	; 93
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	10 82       	st	Z, r1
	sint32 pass = 0, confirm_pass = 0;
     b90:	fe 01       	movw	r30, r28
     b92:	e1 56       	subi	r30, 0x61	; 97
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	10 82       	st	Z, r1
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	12 82       	std	Z+2, r1	; 0x02
     b9c:	13 82       	std	Z+3, r1	; 0x03
     b9e:	fe 01       	movw	r30, r28
     ba0:	e5 56       	subi	r30, 0x65	; 101
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	10 82       	st	Z, r1
     ba6:	11 82       	std	Z+1, r1	; 0x01
     ba8:	12 82       	std	Z+2, r1	; 0x02
     baa:	13 82       	std	Z+3, r1	; 0x03

	LCD_clearScreen();
     bac:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
     bb0:	20 e6       	ldi	r18, 0x60	; 96
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	a9 01       	movw	r20, r18
     bba:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
	for (count_key = 0; count_key < 5; count_key++) {
     bbe:	fe 01       	movw	r30, r28
     bc0:	ec 55       	subi	r30, 0x5C	; 92
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	10 82       	st	Z, r1
     bc6:	19 c3       	rjmp	.+1586   	; 0x11fa <newPass+0x694>
		key = KEYPAD_getPressedKey();
     bc8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
     bcc:	fe 01       	movw	r30, r28
     bce:	ed 55       	subi	r30, 0x5D	; 93
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 83       	st	Z, r24
     bd4:	fe 01       	movw	r30, r28
     bd6:	e9 56       	subi	r30, 0x69	; 105
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a8 e4       	ldi	r26, 0x48	; 72
     be0:	b2 e4       	ldi	r27, 0x42	; 66
     be2:	80 83       	st	Z, r24
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	a2 83       	std	Z+2, r26	; 0x02
     be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bea:	8e 01       	movw	r16, r28
     bec:	0d 56       	subi	r16, 0x6D	; 109
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	fe 01       	movw	r30, r28
     bf2:	e9 56       	subi	r30, 0x69	; 105
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4a ef       	ldi	r20, 0xFA	; 250
     c04:	54 e4       	ldi	r21, 0x44	; 68
     c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	f8 01       	movw	r30, r16
     c10:	80 83       	st	Z, r24
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	a2 83       	std	Z+2, r26	; 0x02
     c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c18:	fe 01       	movw	r30, r28
     c1a:	ed 56       	subi	r30, 0x6D	; 109
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	60 81       	ld	r22, Z
     c20:	71 81       	ldd	r23, Z+1	; 0x01
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	93 81       	ldd	r25, Z+3	; 0x03
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e8       	ldi	r20, 0x80	; 128
     c2c:	5f e3       	ldi	r21, 0x3F	; 63
     c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c32:	88 23       	and	r24, r24
     c34:	44 f4       	brge	.+16     	; 0xc46 <newPass+0xe0>
		__ticks = 1;
     c36:	fe 01       	movw	r30, r28
     c38:	ef 56       	subi	r30, 0x6F	; 111
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	64 c0       	rjmp	.+200    	; 0xd0e <newPass+0x1a8>
	else if (__tmp > 65535)
     c46:	fe 01       	movw	r30, r28
     c48:	ed 56       	subi	r30, 0x6D	; 109
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	3f ef       	ldi	r19, 0xFF	; 255
     c58:	4f e7       	ldi	r20, 0x7F	; 127
     c5a:	57 e4       	ldi	r21, 0x47	; 71
     c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c60:	18 16       	cp	r1, r24
     c62:	0c f0       	brlt	.+2      	; 0xc66 <newPass+0x100>
     c64:	43 c0       	rjmp	.+134    	; 0xcec <newPass+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c66:	fe 01       	movw	r30, r28
     c68:	e9 56       	subi	r30, 0x69	; 105
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	60 81       	ld	r22, Z
     c6e:	71 81       	ldd	r23, Z+1	; 0x01
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	8e 01       	movw	r16, r28
     c86:	0f 56       	subi	r16, 0x6F	; 111
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	bc 01       	movw	r22, r24
     c8c:	cd 01       	movw	r24, r26
     c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	f8 01       	movw	r30, r16
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	1f c0       	rjmp	.+62     	; 0xcdc <newPass+0x176>
     c9e:	fe 01       	movw	r30, r28
     ca0:	e1 57       	subi	r30, 0x71	; 113
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cac:	fe 01       	movw	r30, r28
     cae:	e1 57       	subi	r30, 0x71	; 113
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <newPass+0x150>
     cba:	fe 01       	movw	r30, r28
     cbc:	e1 57       	subi	r30, 0x71	; 113
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc4:	de 01       	movw	r26, r28
     cc6:	af 56       	subi	r26, 0x6F	; 111
     cc8:	bf 4f       	sbci	r27, 0xFF	; 255
     cca:	fe 01       	movw	r30, r28
     ccc:	ef 56       	subi	r30, 0x6F	; 111
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cdc:	fe 01       	movw	r30, r28
     cde:	ef 56       	subi	r30, 0x6F	; 111
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	d1 f6       	brne	.-76     	; 0xc9e <newPass+0x138>
     cea:	e3 c0       	rjmp	.+454    	; 0xeb2 <newPass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cec:	8e 01       	movw	r16, r28
     cee:	0f 56       	subi	r16, 0x6F	; 111
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	ed 56       	subi	r30, 0x6D	; 109
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	f8 01       	movw	r30, r16
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
     d0e:	de 01       	movw	r26, r28
     d10:	a3 57       	subi	r26, 0x73	; 115
     d12:	bf 4f       	sbci	r27, 0xFF	; 255
     d14:	fe 01       	movw	r30, r28
     d16:	ef 56       	subi	r30, 0x6F	; 111
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	fe 01       	movw	r30, r28
     d26:	e3 57       	subi	r30, 0x73	; 115
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <newPass+0x1c8>
     d32:	fe 01       	movw	r30, r28
     d34:	e3 57       	subi	r30, 0x73	; 115
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
     d3c:	ba c0       	rjmp	.+372    	; 0xeb2 <newPass+0x34c>
		_delay_ms(50);
		while (!((key >= 0) && (key <= 9))) {

			key = KEYPAD_getPressedKey();
     d3e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
     d42:	fe 01       	movw	r30, r28
     d44:	ed 55       	subi	r30, 0x5D	; 93
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 83       	st	Z, r24
     d4a:	fe 01       	movw	r30, r28
     d4c:	e7 57       	subi	r30, 0x77	; 119
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a8 e4       	ldi	r26, 0x48	; 72
     d56:	b2 e4       	ldi	r27, 0x42	; 66
     d58:	80 83       	st	Z, r24
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	a2 83       	std	Z+2, r26	; 0x02
     d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	8e 01       	movw	r16, r28
     d62:	0b 57       	subi	r16, 0x7B	; 123
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	fe 01       	movw	r30, r28
     d68:	e7 57       	subi	r30, 0x77	; 119
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	4a ef       	ldi	r20, 0xFA	; 250
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	a2 83       	std	Z+2, r26	; 0x02
     d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d8e:	fe 01       	movw	r30, r28
     d90:	eb 57       	subi	r30, 0x7B	; 123
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da8:	88 23       	and	r24, r24
     daa:	44 f4       	brge	.+16     	; 0xdbc <newPass+0x256>
		__ticks = 1;
     dac:	fe 01       	movw	r30, r28
     dae:	ed 57       	subi	r30, 0x7D	; 125
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
     dba:	64 c0       	rjmp	.+200    	; 0xe84 <newPass+0x31e>
	else if (__tmp > 65535)
     dbc:	fe 01       	movw	r30, r28
     dbe:	eb 57       	subi	r30, 0x7B	; 123
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <newPass+0x276>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <newPass+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	fe 01       	movw	r30, r28
     dde:	e7 57       	subi	r30, 0x77	; 119
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8e 01       	movw	r16, r28
     dfc:	0d 57       	subi	r16, 0x7D	; 125
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <newPass+0x2ec>
     e14:	fe 01       	movw	r30, r28
     e16:	ef 57       	subi	r30, 0x7F	; 127
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	88 ec       	ldi	r24, 0xC8	; 200
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	fe 01       	movw	r30, r28
     e24:	ef 57       	subi	r30, 0x7F	; 127
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <newPass+0x2c6>
     e30:	fe 01       	movw	r30, r28
     e32:	ef 57       	subi	r30, 0x7F	; 127
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	de 01       	movw	r26, r28
     e3c:	ad 57       	subi	r26, 0x7D	; 125
     e3e:	bf 4f       	sbci	r27, 0xFF	; 255
     e40:	fe 01       	movw	r30, r28
     e42:	ed 57       	subi	r30, 0x7D	; 125
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	9c 93       	st	X, r25
     e50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	fe 01       	movw	r30, r28
     e54:	ed 57       	subi	r30, 0x7D	; 125
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	d1 f6       	brne	.-76     	; 0xe14 <newPass+0x2ae>
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <newPass+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	8e 01       	movw	r16, r28
     e64:	0d 57       	subi	r16, 0x7D	; 125
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	fe 01       	movw	r30, r28
     e6a:	eb 57       	subi	r30, 0x7B	; 123
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	de 01       	movw	r26, r28
     e86:	a1 58       	subi	r26, 0x81	; 129
     e88:	bf 4f       	sbci	r27, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	ed 57       	subi	r30, 0x7D	; 125
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	9c 93       	st	X, r25
     e98:	8e 93       	st	-X, r24
     e9a:	fe 01       	movw	r30, r28
     e9c:	e1 58       	subi	r30, 0x81	; 129
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <newPass+0x33e>
     ea8:	fe 01       	movw	r30, r28
     eaa:	e1 58       	subi	r30, 0x81	; 129
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
	for (count_key = 0; count_key < 5; count_key++) {
		key = KEYPAD_getPressedKey();
		_delay_ms(50);
		while (!((key >= 0) && (key <= 9))) {
     eb2:	fe 01       	movw	r30, r28
     eb4:	ed 55       	subi	r30, 0x5D	; 93
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	8a 30       	cpi	r24, 0x0A	; 10
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <newPass+0x35a>
     ebe:	3f cf       	rjmp	.-386    	; 0xd3e <newPass+0x1d8>

			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1, count_key, "*");
     ec0:	fe 01       	movw	r30, r28
     ec2:	ec 55       	subi	r30, 0x5C	; 92
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	20 e7       	ldi	r18, 0x70	; 112
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	60 81       	ld	r22, Z
     ece:	a9 01       	movw	r20, r18
     ed0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
     ed4:	fe 01       	movw	r30, r28
     ed6:	e5 58       	subi	r30, 0x85	; 133
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	ac e8       	ldi	r26, 0x8C	; 140
     ee0:	b2 e4       	ldi	r27, 0x42	; 66
     ee2:	80 83       	st	Z, r24
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	a2 83       	std	Z+2, r26	; 0x02
     ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	8e 01       	movw	r16, r28
     eec:	09 58       	subi	r16, 0x89	; 137
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	fe 01       	movw	r30, r28
     ef2:	e5 58       	subi	r30, 0x85	; 133
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a ef       	ldi	r20, 0xFA	; 250
     f04:	54 e4       	ldi	r21, 0x44	; 68
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	80 83       	st	Z, r24
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	a2 83       	std	Z+2, r26	; 0x02
     f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f18:	fe 01       	movw	r30, r28
     f1a:	e9 58       	subi	r30, 0x89	; 137
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	44 f4       	brge	.+16     	; 0xf46 <newPass+0x3e0>
		__ticks = 1;
     f36:	fe 01       	movw	r30, r28
     f38:	eb 58       	subi	r30, 0x8B	; 139
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	64 c0       	rjmp	.+200    	; 0x100e <newPass+0x4a8>
	else if (__tmp > 65535)
     f46:	fe 01       	movw	r30, r28
     f48:	e9 58       	subi	r30, 0x89	; 137
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f60:	18 16       	cp	r1, r24
     f62:	0c f0       	brlt	.+2      	; 0xf66 <newPass+0x400>
     f64:	43 c0       	rjmp	.+134    	; 0xfec <newPass+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	fe 01       	movw	r30, r28
     f68:	e5 58       	subi	r30, 0x85	; 133
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8e 01       	movw	r16, r28
     f86:	0b 58       	subi	r16, 0x8B	; 139
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	f8 01       	movw	r30, r16
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <newPass+0x476>
     f9e:	fe 01       	movw	r30, r28
     fa0:	ed 58       	subi	r30, 0x8D	; 141
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	fe 01       	movw	r30, r28
     fae:	ed 58       	subi	r30, 0x8D	; 141
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <newPass+0x450>
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 58       	subi	r30, 0x8D	; 141
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	de 01       	movw	r26, r28
     fc6:	ab 58       	subi	r26, 0x8B	; 139
     fc8:	bf 4f       	sbci	r27, 0xFF	; 255
     fca:	fe 01       	movw	r30, r28
     fcc:	eb 58       	subi	r30, 0x8B	; 139
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	9c 93       	st	X, r25
     fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	fe 01       	movw	r30, r28
     fde:	eb 58       	subi	r30, 0x8B	; 139
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	d1 f6       	brne	.-76     	; 0xf9e <newPass+0x438>
     fea:	27 c0       	rjmp	.+78     	; 0x103a <newPass+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	8e 01       	movw	r16, r28
     fee:	0b 58       	subi	r16, 0x8B	; 139
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	e9 58       	subi	r30, 0x89	; 137
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	de 01       	movw	r26, r28
    1010:	af 58       	subi	r26, 0x8F	; 143
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	fe 01       	movw	r30, r28
    1016:	eb 58       	subi	r30, 0x8B	; 139
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	8d 93       	st	X+, r24
    1020:	9c 93       	st	X, r25
    1022:	fe 01       	movw	r30, r28
    1024:	ef 58       	subi	r30, 0x8F	; 143
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <newPass+0x4c6>
    1030:	fe 01       	movw	r30, r28
    1032:	ef 58       	subi	r30, 0x8F	; 143
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
		_delay_ms(70);
		pass = pass * 10 + key;
    103a:	fe 01       	movw	r30, r28
    103c:	e1 56       	subi	r30, 0x61	; 97
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	a2 81       	ldd	r26, Z+2	; 0x02
    1046:	b3 81       	ldd	r27, Z+3	; 0x03
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__mulsi3>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	fe 01       	movw	r30, r28
    105e:	ed 55       	subi	r30, 0x5D	; 93
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	fe 01       	movw	r30, r28
    106e:	e1 56       	subi	r30, 0x61	; 97
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	a4 1f       	adc	r26, r20
    1078:	b5 1f       	adc	r27, r21
    107a:	80 83       	st	Z, r24
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	a2 83       	std	Z+2, r26	; 0x02
    1080:	b3 83       	std	Z+3, r27	; 0x03
    1082:	fe 01       	movw	r30, r28
    1084:	e3 59       	subi	r30, 0x93	; 147
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	aa e7       	ldi	r26, 0x7A	; 122
    108e:	b3 e4       	ldi	r27, 0x43	; 67
    1090:	80 83       	st	Z, r24
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	a2 83       	std	Z+2, r26	; 0x02
    1096:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	8e 01       	movw	r16, r28
    109a:	07 59       	subi	r16, 0x97	; 151
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	fe 01       	movw	r30, r28
    10a0:	e3 59       	subi	r30, 0x93	; 147
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a ef       	ldi	r20, 0xFA	; 250
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	f8 01       	movw	r30, r16
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c6:	fe 01       	movw	r30, r28
    10c8:	e7 59       	subi	r30, 0x97	; 151
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	44 f4       	brge	.+16     	; 0x10f4 <newPass+0x58e>
		__ticks = 1;
    10e4:	fe 01       	movw	r30, r28
    10e6:	e9 59       	subi	r30, 0x99	; 153
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
    10f2:	64 c0       	rjmp	.+200    	; 0x11bc <newPass+0x656>
	else if (__tmp > 65535)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e7 59       	subi	r30, 0x97	; 151
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	0c f0       	brlt	.+2      	; 0x1114 <newPass+0x5ae>
    1112:	43 c0       	rjmp	.+134    	; 0x119a <newPass+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	fe 01       	movw	r30, r28
    1116:	e3 59       	subi	r30, 0x93	; 147
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8e 01       	movw	r16, r28
    1134:	09 59       	subi	r16, 0x99	; 153
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f8 01       	movw	r30, r16
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
    114a:	1f c0       	rjmp	.+62     	; 0x118a <newPass+0x624>
    114c:	fe 01       	movw	r30, r28
    114e:	eb 59       	subi	r30, 0x9B	; 155
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	88 ec       	ldi	r24, 0xC8	; 200
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
    115a:	fe 01       	movw	r30, r28
    115c:	eb 59       	subi	r30, 0x9B	; 155
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <newPass+0x5fe>
    1168:	fe 01       	movw	r30, r28
    116a:	eb 59       	subi	r30, 0x9B	; 155
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1172:	de 01       	movw	r26, r28
    1174:	a9 59       	subi	r26, 0x99	; 153
    1176:	bf 4f       	sbci	r27, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	e9 59       	subi	r30, 0x99	; 153
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118a:	fe 01       	movw	r30, r28
    118c:	e9 59       	subi	r30, 0x99	; 153
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	d1 f6       	brne	.-76     	; 0x114c <newPass+0x5e6>
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <newPass+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	8e 01       	movw	r16, r28
    119c:	09 59       	subi	r16, 0x99	; 153
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	fe 01       	movw	r30, r28
    11a2:	e7 59       	subi	r30, 0x97	; 151
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	f8 01       	movw	r30, r16
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	de 01       	movw	r26, r28
    11be:	ad 59       	subi	r26, 0x9D	; 157
    11c0:	bf 4f       	sbci	r27, 0xFF	; 255
    11c2:	fe 01       	movw	r30, r28
    11c4:	e9 59       	subi	r30, 0x99	; 153
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	8d 93       	st	X+, r24
    11ce:	9c 93       	st	X, r25
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 59       	subi	r30, 0x9D	; 157
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <newPass+0x674>
    11de:	fe 01       	movw	r30, r28
    11e0:	ed 59       	subi	r30, 0x9D	; 157
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
	uint8 count_key = 0, key = 0;
	sint32 pass = 0, confirm_pass = 0;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
	for (count_key = 0; count_key < 5; count_key++) {
    11e8:	de 01       	movw	r26, r28
    11ea:	ac 55       	subi	r26, 0x5C	; 92
    11ec:	bf 4f       	sbci	r27, 0xFF	; 255
    11ee:	fe 01       	movw	r30, r28
    11f0:	ec 55       	subi	r30, 0x5C	; 92
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8c 93       	st	X, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	ec 55       	subi	r30, 0x5C	; 92
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	85 30       	cpi	r24, 0x05	; 5
    1204:	08 f4       	brcc	.+2      	; 0x1208 <newPass+0x6a2>
    1206:	e0 cc       	rjmp	.-1600   	; 0xbc8 <newPass+0x62>
		_delay_ms(70);
		pass = pass * 10 + key;
		_delay_ms(250);
	}

	LCD_clearScreen();
    1208:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Press Enter");
    120c:	22 e7       	ldi	r18, 0x72	; 114
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
    121a:	ba c0       	rjmp	.+372    	; 0x1390 <newPass+0x82a>

	while (key != '=') {
		key = KEYPAD_getPressedKey();
    121c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    1220:	fe 01       	movw	r30, r28
    1222:	ed 55       	subi	r30, 0x5D	; 93
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 83       	st	Z, r24
    1228:	fe 01       	movw	r30, r28
    122a:	e1 5a       	subi	r30, 0xA1	; 161
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	ac e8       	ldi	r26, 0x8C	; 140
    1234:	b2 e4       	ldi	r27, 0x42	; 66
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123e:	8e 01       	movw	r16, r28
    1240:	05 5a       	subi	r16, 0xA5	; 165
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	e1 5a       	subi	r30, 0xA1	; 161
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a ef       	ldi	r20, 0xFA	; 250
    1258:	54 e4       	ldi	r21, 0x44	; 68
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    126c:	fe 01       	movw	r30, r28
    126e:	e5 5a       	subi	r30, 0xA5	; 165
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	44 f4       	brge	.+16     	; 0x129a <newPass+0x734>
		__ticks = 1;
    128a:	fe 01       	movw	r30, r28
    128c:	e7 5a       	subi	r30, 0xA7	; 167
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	64 c0       	rjmp	.+200    	; 0x1362 <newPass+0x7fc>
	else if (__tmp > 65535)
    129a:	fe 01       	movw	r30, r28
    129c:	e5 5a       	subi	r30, 0xA5	; 165
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <newPass+0x754>
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <newPass+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	fe 01       	movw	r30, r28
    12bc:	e1 5a       	subi	r30, 0xA1	; 161
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8e 01       	movw	r16, r28
    12da:	07 5a       	subi	r16, 0xA7	; 167
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	f8 01       	movw	r30, r16
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	80 83       	st	Z, r24
    12f0:	1f c0       	rjmp	.+62     	; 0x1330 <newPass+0x7ca>
    12f2:	fe 01       	movw	r30, r28
    12f4:	e9 5a       	subi	r30, 0xA9	; 169
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	88 ec       	ldi	r24, 0xC8	; 200
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	fe 01       	movw	r30, r28
    1302:	e9 5a       	subi	r30, 0xA9	; 169
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <newPass+0x7a4>
    130e:	fe 01       	movw	r30, r28
    1310:	e9 5a       	subi	r30, 0xA9	; 169
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	de 01       	movw	r26, r28
    131a:	a7 5a       	subi	r26, 0xA7	; 167
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e7 5a       	subi	r30, 0xA7	; 167
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	9c 93       	st	X, r25
    132e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	fe 01       	movw	r30, r28
    1332:	e7 5a       	subi	r30, 0xA7	; 167
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f6       	brne	.-76     	; 0x12f2 <newPass+0x78c>
    133e:	28 c0       	rjmp	.+80     	; 0x1390 <newPass+0x82a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	8e 01       	movw	r16, r28
    1342:	07 5a       	subi	r16, 0xA7	; 167
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	e5 5a       	subi	r30, 0xA5	; 165
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	de 01       	movw	r26, r28
    1364:	ab 5a       	subi	r26, 0xAB	; 171
    1366:	bf 4f       	sbci	r27, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	e7 5a       	subi	r30, 0xA7	; 167
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	11 96       	adiw	r26, 0x01	; 1
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	fe 01       	movw	r30, r28
    137a:	eb 5a       	subi	r30, 0xAB	; 171
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <newPass+0x81c>
    1386:	fe 01       	movw	r30, r28
    1388:	eb 5a       	subi	r30, 0xAB	; 171
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
	}

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Press Enter");

	while (key != '=') {
    1390:	fe 01       	movw	r30, r28
    1392:	ed 55       	subi	r30, 0x5D	; 93
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	8d 33       	cpi	r24, 0x3D	; 61
    139a:	09 f0       	breq	.+2      	; 0x139e <newPass+0x838>
    139c:	3f cf       	rjmp	.-386    	; 0x121c <newPass+0x6b6>
		key = KEYPAD_getPressedKey();
		_delay_ms(70);
	}

	LCD_clearScreen();
    139e:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "please re-enter the");
    13a2:	2e e7       	ldi	r18, 0x7E	; 126
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "same pass: ");
    13b0:	22 e9       	ldi	r18, 0x92	; 146
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>

	for (count_key = 0; count_key < 5; count_key++) {
    13be:	fe 01       	movw	r30, r28
    13c0:	ec 55       	subi	r30, 0x5C	; 92
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	10 82       	st	Z, r1
    13c6:	6b c2       	rjmp	.+1238   	; 0x189e <newPass+0xd38>
		key = KEYPAD_getPressedKey();
    13c8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    13cc:	fe 01       	movw	r30, r28
    13ce:	ed 55       	subi	r30, 0x5D	; 93
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	fe 01       	movw	r30, r28
    13d6:	ef 5a       	subi	r30, 0xAF	; 175
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a8 e4       	ldi	r26, 0x48	; 72
    13e0:	b2 e4       	ldi	r27, 0x42	; 66
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	8e 01       	movw	r16, r28
    13ec:	03 5b       	subi	r16, 0xB3	; 179
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	ef 5a       	subi	r30, 0xAF	; 175
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a ef       	ldi	r20, 0xFA	; 250
    1404:	54 e4       	ldi	r21, 0x44	; 68
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1418:	fe 01       	movw	r30, r28
    141a:	e3 5b       	subi	r30, 0xB3	; 179
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	44 f4       	brge	.+16     	; 0x1446 <newPass+0x8e0>
		__ticks = 1;
    1436:	fe 01       	movw	r30, r28
    1438:	e5 5b       	subi	r30, 0xB5	; 181
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
    1444:	64 c0       	rjmp	.+200    	; 0x150e <newPass+0x9a8>
	else if (__tmp > 65535)
    1446:	fe 01       	movw	r30, r28
    1448:	e3 5b       	subi	r30, 0xB3	; 179
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	0c f0       	brlt	.+2      	; 0x1466 <newPass+0x900>
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <newPass+0x986>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	fe 01       	movw	r30, r28
    1468:	ef 5a       	subi	r30, 0xAF	; 175
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e2       	ldi	r20, 0x20	; 32
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8e 01       	movw	r16, r28
    1486:	05 5b       	subi	r16, 0xB5	; 181
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	f8 01       	movw	r30, r16
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
    149c:	1f c0       	rjmp	.+62     	; 0x14dc <newPass+0x976>
    149e:	fe 01       	movw	r30, r28
    14a0:	e7 5b       	subi	r30, 0xB7	; 183
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
    14ac:	fe 01       	movw	r30, r28
    14ae:	e7 5b       	subi	r30, 0xB7	; 183
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <newPass+0x950>
    14ba:	fe 01       	movw	r30, r28
    14bc:	e7 5b       	subi	r30, 0xB7	; 183
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	de 01       	movw	r26, r28
    14c6:	a5 5b       	subi	r26, 0xB5	; 181
    14c8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	e5 5b       	subi	r30, 0xB5	; 181
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	9c 93       	st	X, r25
    14da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	fe 01       	movw	r30, r28
    14de:	e5 5b       	subi	r30, 0xB5	; 181
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	d1 f6       	brne	.-76     	; 0x149e <newPass+0x938>
    14ea:	b4 c0       	rjmp	.+360    	; 0x1654 <newPass+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	8e 01       	movw	r16, r28
    14ee:	05 5b       	subi	r16, 0xB5	; 181
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	fe 01       	movw	r30, r28
    14f4:	e3 5b       	subi	r30, 0xB3	; 179
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	f8 01       	movw	r30, r16
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	de 01       	movw	r26, r28
    1510:	a9 5b       	subi	r26, 0xB9	; 185
    1512:	bf 4f       	sbci	r27, 0xFF	; 255
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5b       	subi	r30, 0xB5	; 181
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
    1524:	fe 01       	movw	r30, r28
    1526:	e9 5b       	subi	r30, 0xB9	; 185
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <newPass+0x9c8>
    1532:	fe 01       	movw	r30, r28
    1534:	e9 5b       	subi	r30, 0xB9	; 185
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
    153c:	8b c0       	rjmp	.+278    	; 0x1654 <newPass+0xaee>
		_delay_ms(50);
		while (!((key >= 0) && (key <= 9))) {

			key = KEYPAD_getPressedKey();
    153e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    1542:	fe 01       	movw	r30, r28
    1544:	ed 55       	subi	r30, 0x5D	; 93
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 83       	st	Z, r24
    154a:	fe 01       	movw	r30, r28
    154c:	ed 5b       	subi	r30, 0xBD	; 189
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a8 e4       	ldi	r26, 0x48	; 72
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	8e 01       	movw	r16, r28
    1562:	01 5c       	subi	r16, 0xC1	; 193
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	ed 5b       	subi	r30, 0xBD	; 189
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a ef       	ldi	r20, 0xFA	; 250
    157a:	54 e4       	ldi	r21, 0x44	; 68
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	f8 01       	movw	r30, r16
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	a2 83       	std	Z+2, r26	; 0x02
    158c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158e:	fe 01       	movw	r30, r28
    1590:	ff 96       	adiw	r30, 0x3f	; 63
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <newPass+0xa4e>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e af       	std	Y+62, r25	; 0x3e
    15b0:	8d af       	std	Y+61, r24	; 0x3d
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <newPass+0xada>
	else if (__tmp > 65535)
    15b4:	fe 01       	movw	r30, r28
    15b6:	ff 96       	adiw	r30, 0x3f	; 63
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	64 f5       	brge	.+88     	; 0x1628 <newPass+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	ed 5b       	subi	r30, 0xBD	; 189
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e af       	std	Y+62, r25	; 0x3e
    15fc:	8d af       	std	Y+61, r24	; 0x3d
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <newPass+0xab8>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c af       	std	Y+60, r25	; 0x3c
    1606:	8b af       	std	Y+59, r24	; 0x3b
    1608:	8b ad       	ldd	r24, Y+59	; 0x3b
    160a:	9c ad       	ldd	r25, Y+60	; 0x3c
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <newPass+0xaa6>
    1610:	9c af       	std	Y+60, r25	; 0x3c
    1612:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d ad       	ldd	r24, Y+61	; 0x3d
    1616:	9e ad       	ldd	r25, Y+62	; 0x3e
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e af       	std	Y+62, r25	; 0x3e
    161c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1620:	9e ad       	ldd	r25, Y+62	; 0x3e
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <newPass+0xa9a>
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <newPass+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	fe 01       	movw	r30, r28
    162a:	ff 96       	adiw	r30, 0x3f	; 63
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9e af       	std	Y+62, r25	; 0x3e
    163e:	8d af       	std	Y+61, r24	; 0x3d
    1640:	8d ad       	ldd	r24, Y+61	; 0x3d
    1642:	9e ad       	ldd	r25, Y+62	; 0x3e
    1644:	9a af       	std	Y+58, r25	; 0x3a
    1646:	89 af       	std	Y+57, r24	; 0x39
    1648:	89 ad       	ldd	r24, Y+57	; 0x39
    164a:	9a ad       	ldd	r25, Y+58	; 0x3a
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <newPass+0xae6>
    1650:	9a af       	std	Y+58, r25	; 0x3a
    1652:	89 af       	std	Y+57, r24	; 0x39
	LCD_displayStringRowColumn(1, 0, "same pass: ");

	for (count_key = 0; count_key < 5; count_key++) {
		key = KEYPAD_getPressedKey();
		_delay_ms(50);
		while (!((key >= 0) && (key <= 9))) {
    1654:	fe 01       	movw	r30, r28
    1656:	ed 55       	subi	r30, 0x5D	; 93
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	8a 30       	cpi	r24, 0x0A	; 10
    165e:	08 f0       	brcs	.+2      	; 0x1662 <newPass+0xafc>
    1660:	6e cf       	rjmp	.-292    	; 0x153e <newPass+0x9d8>

			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_displayStringRowColumn(1, count_key + 10, "*");
    1662:	fe 01       	movw	r30, r28
    1664:	ec 55       	subi	r30, 0x5C	; 92
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	98 2f       	mov	r25, r24
    166c:	96 5f       	subi	r25, 0xF6	; 246
    166e:	20 e7       	ldi	r18, 0x70	; 112
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	69 2f       	mov	r22, r25
    1676:	a9 01       	movw	r20, r18
    1678:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	ac e8       	ldi	r26, 0x8C	; 140
    1682:	b2 e4       	ldi	r27, 0x42	; 66
    1684:	8d ab       	std	Y+53, r24	; 0x35
    1686:	9e ab       	std	Y+54, r25	; 0x36
    1688:	af ab       	std	Y+55, r26	; 0x37
    168a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6d a9       	ldd	r22, Y+53	; 0x35
    168e:	7e a9       	ldd	r23, Y+54	; 0x36
    1690:	8f a9       	ldd	r24, Y+55	; 0x37
    1692:	98 ad       	ldd	r25, Y+56	; 0x38
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	89 ab       	std	Y+49, r24	; 0x31
    16a6:	9a ab       	std	Y+50, r25	; 0x32
    16a8:	ab ab       	std	Y+51, r26	; 0x33
    16aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16ac:	69 a9       	ldd	r22, Y+49	; 0x31
    16ae:	7a a9       	ldd	r23, Y+50	; 0x32
    16b0:	8b a9       	ldd	r24, Y+51	; 0x33
    16b2:	9c a9       	ldd	r25, Y+52	; 0x34
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <newPass+0xb68>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	98 ab       	std	Y+48, r25	; 0x30
    16ca:	8f a7       	std	Y+47, r24	; 0x2f
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <newPass+0xbe6>
	else if (__tmp > 65535)
    16ce:	69 a9       	ldd	r22, Y+49	; 0x31
    16d0:	7a a9       	ldd	r23, Y+50	; 0x32
    16d2:	8b a9       	ldd	r24, Y+51	; 0x33
    16d4:	9c a9       	ldd	r25, Y+52	; 0x34
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <newPass+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6d a9       	ldd	r22, Y+53	; 0x35
    16e8:	7e a9       	ldd	r23, Y+54	; 0x36
    16ea:	8f a9       	ldd	r24, Y+55	; 0x37
    16ec:	98 ad       	ldd	r25, Y+56	; 0x38
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	98 ab       	std	Y+48, r25	; 0x30
    170c:	8f a7       	std	Y+47, r24	; 0x2f
    170e:	0f c0       	rjmp	.+30     	; 0x172e <newPass+0xbc8>
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9e a7       	std	Y+46, r25	; 0x2e
    1716:	8d a7       	std	Y+45, r24	; 0x2d
    1718:	8d a5       	ldd	r24, Y+45	; 0x2d
    171a:	9e a5       	ldd	r25, Y+46	; 0x2e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <newPass+0xbb6>
    1720:	9e a7       	std	Y+46, r25	; 0x2e
    1722:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8f a5       	ldd	r24, Y+47	; 0x2f
    1726:	98 a9       	ldd	r25, Y+48	; 0x30
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	98 ab       	std	Y+48, r25	; 0x30
    172c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1730:	98 a9       	ldd	r25, Y+48	; 0x30
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <newPass+0xbaa>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <newPass+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	69 a9       	ldd	r22, Y+49	; 0x31
    173a:	7a a9       	ldd	r23, Y+50	; 0x32
    173c:	8b a9       	ldd	r24, Y+51	; 0x33
    173e:	9c a9       	ldd	r25, Y+52	; 0x34
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	98 ab       	std	Y+48, r25	; 0x30
    174a:	8f a7       	std	Y+47, r24	; 0x2f
    174c:	8f a5       	ldd	r24, Y+47	; 0x2f
    174e:	98 a9       	ldd	r25, Y+48	; 0x30
    1750:	9c a7       	std	Y+44, r25	; 0x2c
    1752:	8b a7       	std	Y+43, r24	; 0x2b
    1754:	8b a5       	ldd	r24, Y+43	; 0x2b
    1756:	9c a5       	ldd	r25, Y+44	; 0x2c
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <newPass+0xbf2>
    175c:	9c a7       	std	Y+44, r25	; 0x2c
    175e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(70);
		confirm_pass = confirm_pass * 10 + key;
    1760:	fe 01       	movw	r30, r28
    1762:	e5 56       	subi	r30, 0x65	; 101
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	a2 81       	ldd	r26, Z+2	; 0x02
    176c:	b3 81       	ldd	r27, Z+3	; 0x03
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__mulsi3>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	fe 01       	movw	r30, r28
    1784:	ed 55       	subi	r30, 0x5D	; 93
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e0       	ldi	r26, 0x00	; 0
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	fe 01       	movw	r30, r28
    1794:	e5 56       	subi	r30, 0x65	; 101
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	82 0f       	add	r24, r18
    179a:	93 1f       	adc	r25, r19
    179c:	a4 1f       	adc	r26, r20
    179e:	b5 1f       	adc	r27, r21
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	aa e7       	ldi	r26, 0x7A	; 122
    17ae:	b3 e4       	ldi	r27, 0x43	; 67
    17b0:	8f a3       	std	Y+39, r24	; 0x27
    17b2:	98 a7       	std	Y+40, r25	; 0x28
    17b4:	a9 a7       	std	Y+41, r26	; 0x29
    17b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	6f a1       	ldd	r22, Y+39	; 0x27
    17ba:	78 a5       	ldd	r23, Y+40	; 0x28
    17bc:	89 a5       	ldd	r24, Y+41	; 0x29
    17be:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8b a3       	std	Y+35, r24	; 0x23
    17d2:	9c a3       	std	Y+36, r25	; 0x24
    17d4:	ad a3       	std	Y+37, r26	; 0x25
    17d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d8:	6b a1       	ldd	r22, Y+35	; 0x23
    17da:	7c a1       	ldd	r23, Y+36	; 0x24
    17dc:	8d a1       	ldd	r24, Y+37	; 0x25
    17de:	9e a1       	ldd	r25, Y+38	; 0x26
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <newPass+0xc94>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <newPass+0xd12>
	else if (__tmp > 65535)
    17fa:	6b a1       	ldd	r22, Y+35	; 0x23
    17fc:	7c a1       	ldd	r23, Y+36	; 0x24
    17fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1800:	9e a1       	ldd	r25, Y+38	; 0x26
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <newPass+0xcfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	6f a1       	ldd	r22, Y+39	; 0x27
    1814:	78 a5       	ldd	r23, Y+40	; 0x28
    1816:	89 a5       	ldd	r24, Y+41	; 0x29
    1818:	9a a5       	ldd	r25, Y+42	; 0x2a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9a a3       	std	Y+34, r25	; 0x22
    1838:	89 a3       	std	Y+33, r24	; 0x21
    183a:	0f c0       	rjmp	.+30     	; 0x185a <newPass+0xcf4>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
    1844:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1846:	98 a1       	ldd	r25, Y+32	; 0x20
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <newPass+0xce2>
    184c:	98 a3       	std	Y+32, r25	; 0x20
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	89 a1       	ldd	r24, Y+33	; 0x21
    1852:	9a a1       	ldd	r25, Y+34	; 0x22
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9a a3       	std	Y+34, r25	; 0x22
    1858:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <newPass+0xcd6>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <newPass+0xd26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6b a1       	ldd	r22, Y+35	; 0x23
    1866:	7c a1       	ldd	r23, Y+36	; 0x24
    1868:	8d a1       	ldd	r24, Y+37	; 0x25
    186a:	9e a1       	ldd	r25, Y+38	; 0x26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9a a3       	std	Y+34, r25	; 0x22
    1876:	89 a3       	std	Y+33, r24	; 0x21
    1878:	89 a1       	ldd	r24, Y+33	; 0x21
    187a:	9a a1       	ldd	r25, Y+34	; 0x22
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
    1880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <newPass+0xd1e>
    1888:	9e 8f       	std	Y+30, r25	; 0x1e
    188a:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "please re-enter the");
	LCD_displayStringRowColumn(1, 0, "same pass: ");

	for (count_key = 0; count_key < 5; count_key++) {
    188c:	de 01       	movw	r26, r28
    188e:	ac 55       	subi	r26, 0x5C	; 92
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	ec 55       	subi	r30, 0x5C	; 92
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	8c 93       	st	X, r24
    189e:	fe 01       	movw	r30, r28
    18a0:	ec 55       	subi	r30, 0x5C	; 92
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <newPass+0xd46>
    18aa:	8e cd       	rjmp	.-1252   	; 0x13c8 <newPass+0x862>
		_delay_ms(70);
		confirm_pass = confirm_pass * 10 + key;
		_delay_ms(250);
	}

	LCD_clearScreen();
    18ac:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Press Enter");
    18b0:	22 e7       	ldi	r18, 0x72	; 114
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	a9 01       	movw	r20, r18
    18ba:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
    18be:	78 c0       	rjmp	.+240    	; 0x19b0 <newPass+0xe4a>

	while (key != '=') {
		key = KEYPAD_getPressedKey();
    18c0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 55       	subi	r30, 0x5D	; 93
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	ac e8       	ldi	r26, 0x8C	; 140
    18d2:	b2 e4       	ldi	r27, 0x42	; 66
    18d4:	89 8f       	std	Y+25, r24	; 0x19
    18d6:	9a 8f       	std	Y+26, r25	; 0x1a
    18d8:	ab 8f       	std	Y+27, r26	; 0x1b
    18da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	69 8d       	ldd	r22, Y+25	; 0x19
    18de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8d 8b       	std	Y+21, r24	; 0x15
    18f6:	9e 8b       	std	Y+22, r25	; 0x16
    18f8:	af 8b       	std	Y+23, r26	; 0x17
    18fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fc:	6d 89       	ldd	r22, Y+21	; 0x15
    18fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1900:	8f 89       	ldd	r24, Y+23	; 0x17
    1902:	98 8d       	ldd	r25, Y+24	; 0x18
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <newPass+0xdb8>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 8b       	std	Y+20, r25	; 0x14
    191a:	8b 8b       	std	Y+19, r24	; 0x13
    191c:	3f c0       	rjmp	.+126    	; 0x199c <newPass+0xe36>
	else if (__tmp > 65535)
    191e:	6d 89       	ldd	r22, Y+21	; 0x15
    1920:	7e 89       	ldd	r23, Y+22	; 0x16
    1922:	8f 89       	ldd	r24, Y+23	; 0x17
    1924:	98 8d       	ldd	r25, Y+24	; 0x18
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <newPass+0xe22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	69 8d       	ldd	r22, Y+25	; 0x19
    1938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9c 8b       	std	Y+20, r25	; 0x14
    195c:	8b 8b       	std	Y+19, r24	; 0x13
    195e:	0f c0       	rjmp	.+30     	; 0x197e <newPass+0xe18>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <newPass+0xe06>
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <newPass+0xdfa>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <newPass+0xe4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	7e 89       	ldd	r23, Y+22	; 0x16
    198c:	8f 89       	ldd	r24, Y+23	; 0x17
    198e:	98 8d       	ldd	r25, Y+24	; 0x18
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
    19a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a6:	98 89       	ldd	r25, Y+16	; 0x10
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <newPass+0xe42>
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
	}

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Press Enter");

	while (key != '=') {
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 55       	subi	r30, 0x5D	; 93
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	8d 33       	cpi	r24, 0x3D	; 61
    19ba:	09 f0       	breq	.+2      	; 0x19be <newPass+0xe58>
    19bc:	81 cf       	rjmp	.-254    	; 0x18c0 <newPass+0xd5a>
		key = KEYPAD_getPressedKey();
		_delay_ms(70);
	}

	if (confirm_pass == pass) {
    19be:	fe 01       	movw	r30, r28
    19c0:	e5 56       	subi	r30, 0x65	; 101
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	de 01       	movw	r26, r28
    19c6:	a1 56       	subi	r26, 0x61	; 97
    19c8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	42 81       	ldd	r20, Z+2	; 0x02
    19d0:	53 81       	ldd	r21, Z+3	; 0x03
    19d2:	8d 91       	ld	r24, X+
    19d4:	9d 91       	ld	r25, X+
    19d6:	0d 90       	ld	r0, X+
    19d8:	bc 91       	ld	r27, X
    19da:	a0 2d       	mov	r26, r0
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	4a 07       	cpc	r20, r26
    19e2:	5b 07       	cpc	r21, r27
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <newPass+0xe82>
    19e6:	59 c0       	rjmp	.+178    	; 0x1a9a <newPass+0xf34>
		UART_sendByte(SAVE);
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>
		for (count_key = 0; count_key < 5; count_key++) {
    19ee:	fe 01       	movw	r30, r28
    19f0:	ec 55       	subi	r30, 0x5C	; 92
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	10 82       	st	Z, r1
    19f6:	45 c0       	rjmp	.+138    	; 0x1a82 <newPass+0xf1c>
			pass = confirm_pass % 10;
    19f8:	8e 01       	movw	r16, r28
    19fa:	01 56       	subi	r16, 0x61	; 97
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	fe 01       	movw	r30, r28
    1a00:	e5 56       	subi	r30, 0x65	; 101
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	a2 81       	ldd	r26, Z+2	; 0x02
    1a0a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 37 21 	call	0x426e	; 0x426e <__divmodsi4>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	f8 01       	movw	r30, r16
    1a22:	80 83       	st	Z, r24
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	a2 83       	std	Z+2, r26	; 0x02
    1a28:	b3 83       	std	Z+3, r27	; 0x03
			while (UART_recieveByte() != M2_READY)
    1a2a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    1a2e:	80 32       	cpi	r24, 0x20	; 32
    1a30:	e1 f7       	brne	.-8      	; 0x1a2a <newPass+0xec4>
				;
			UART_sendByte(pass);
    1a32:	fe 01       	movw	r30, r28
    1a34:	e1 56       	subi	r30, 0x61	; 97
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>
			confirm_pass /= 10;
    1a3e:	8e 01       	movw	r16, r28
    1a40:	05 56       	subi	r16, 0x65	; 101
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e5 56       	subi	r30, 0x65	; 101
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a50:	b3 81       	ldd	r27, Z+3	; 0x03
    1a52:	2a e0       	ldi	r18, 0x0A	; 10
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 37 21 	call	0x426e	; 0x426e <__divmodsi4>
    1a62:	da 01       	movw	r26, r20
    1a64:	c9 01       	movw	r24, r18
    1a66:	f8 01       	movw	r30, r16
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03
		_delay_ms(70);
	}

	if (confirm_pass == pass) {
		UART_sendByte(SAVE);
		for (count_key = 0; count_key < 5; count_key++) {
    1a70:	de 01       	movw	r26, r28
    1a72:	ac 55       	subi	r26, 0x5C	; 92
    1a74:	bf 4f       	sbci	r27, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	ec 55       	subi	r30, 0x5C	; 92
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8c 93       	st	X, r24
    1a82:	fe 01       	movw	r30, r28
    1a84:	ec 55       	subi	r30, 0x5C	; 92
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	85 30       	cpi	r24, 0x05	; 5
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <newPass+0xf2a>
    1a8e:	b4 cf       	rjmp	.-152    	; 0x19f8 <newPass+0xe92>
			while (UART_recieveByte() != M2_READY)
				;
			UART_sendByte(pass);
			confirm_pass /= 10;
		}
		while (UART_recieveByte() != END_SAVING)
    1a90:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <newPass+0xf2a>
    1a98:	84 c0       	rjmp	.+264    	; 0x1ba2 <newPass+0x103c>
			;
	} else {
		LCD_clearScreen();
    1a9a:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PASSWORDS DONT");
    1a9e:	2e e9       	ldi	r18, 0x9E	; 158
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 4, "MATCH");
    1aac:	2d ea       	ldi	r18, 0xAD	; 173
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	64 e0       	ldi	r22, 0x04	; 4
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	aa ef       	ldi	r26, 0xFA	; 250
    1ac0:	b3 e4       	ldi	r27, 0x43	; 67
    1ac2:	8b 87       	std	Y+11, r24	; 0x0b
    1ac4:	9c 87       	std	Y+12, r25	; 0x0c
    1ac6:	ad 87       	std	Y+13, r26	; 0x0d
    1ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8f 83       	std	Y+7, r24	; 0x07
    1ae4:	98 87       	std	Y+8, r25	; 0x08
    1ae6:	a9 87       	std	Y+9, r26	; 0x09
    1ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <newPass+0xfa6>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <newPass+0x1024>
	else if (__tmp > 65535)
    1b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0e:	78 85       	ldd	r23, Y+8	; 0x08
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <newPass+0x1010>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <newPass+0x1006>
    1b4e:	88 ec       	ldi	r24, 0xC8	; 200
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <newPass+0xff4>
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <newPass+0xfe8>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <newPass+0x1038>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <newPass+0x1030>
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		newPass();
    1b9e:	0e 94 b3 05 	call	0xb66	; 0xb66 <newPass>
	}
}
    1ba2:	cc 55       	subi	r28, 0x5C	; 92
    1ba4:	df 4f       	sbci	r29, 0xFF	; 255
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <checkPass>:

void checkPass(const Timer_ConfigType *config_ptr) {
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	c0 55       	subi	r28, 0x50	; 80
    1bc8:	d0 40       	sbci	r29, 0x00	; 0
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e1 5b       	subi	r30, 0xB1	; 177
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
	uint8 key = 0, count_key = 0, pass_digit = 0, pass_error = 0;
    1bde:	fe 01       	movw	r30, r28
    1be0:	e2 5b       	subi	r30, 0xB2	; 178
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	10 82       	st	Z, r1
    1be6:	fe 01       	movw	r30, r28
    1be8:	e3 5b       	subi	r30, 0xB3	; 179
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	10 82       	st	Z, r1
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e4 5b       	subi	r30, 0xB4	; 180
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	10 82       	st	Z, r1
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e5 5b       	subi	r30, 0xB5	; 181
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	10 82       	st	Z, r1
	;
	sint32 pass = 0;
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e9 5b       	subi	r30, 0xB9	; 185
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	10 82       	st	Z, r1
    1c06:	11 82       	std	Z+1, r1	; 0x01
    1c08:	12 82       	std	Z+2, r1	; 0x02
    1c0a:	13 82       	std	Z+3, r1	; 0x03
	LCD_clearScreen();
    1c0c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");
    1c10:	23 eb       	ldi	r18, 0xB3	; 179
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	a9 01       	movw	r20, r18
    1c1a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>

	for (count_key = 0; count_key < 5; count_key++) {
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e3 5b       	subi	r30, 0xB3	; 179
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	10 82       	st	Z, r1
    1c26:	b8 c1       	rjmp	.+880    	; 0x1f98 <checkPass+0x3de>
		key = KEYPAD_getPressedKey();
    1c28:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e2 5b       	subi	r30, 0xB2	; 178
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 83       	st	Z, r24
    1c34:	fe 01       	movw	r30, r28
    1c36:	ed 5b       	subi	r30, 0xBD	; 189
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a8 e4       	ldi	r26, 0x48	; 72
    1c40:	b2 e4       	ldi	r27, 0x42	; 66
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	a2 83       	std	Z+2, r26	; 0x02
    1c48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	01 5c       	subi	r16, 0xC1	; 193
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	fe 01       	movw	r30, r28
    1c52:	ed 5b       	subi	r30, 0xBD	; 189
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	60 81       	ld	r22, Z
    1c58:	71 81       	ldd	r23, Z+1	; 0x01
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	4a ef       	ldi	r20, 0xFA	; 250
    1c64:	54 e4       	ldi	r21, 0x44	; 68
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	f8 01       	movw	r30, r16
    1c70:	80 83       	st	Z, r24
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	a2 83       	std	Z+2, r26	; 0x02
    1c76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c78:	fe 01       	movw	r30, r28
    1c7a:	ff 96       	adiw	r30, 0x3f	; 63
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <checkPass+0xe4>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9e af       	std	Y+62, r25	; 0x3e
    1c9a:	8d af       	std	Y+61, r24	; 0x3d
    1c9c:	46 c0       	rjmp	.+140    	; 0x1d2a <checkPass+0x170>
	else if (__tmp > 65535)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ff 96       	adiw	r30, 0x3f	; 63
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	64 f5       	brge	.+88     	; 0x1d12 <checkPass+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ed 5b       	subi	r30, 0xBD	; 189
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e af       	std	Y+62, r25	; 0x3e
    1ce6:	8d af       	std	Y+61, r24	; 0x3d
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <checkPass+0x14e>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c af       	std	Y+60, r25	; 0x3c
    1cf0:	8b af       	std	Y+59, r24	; 0x3b
    1cf2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cf4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <checkPass+0x13c>
    1cfa:	9c af       	std	Y+60, r25	; 0x3c
    1cfc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9e af       	std	Y+62, r25	; 0x3e
    1d06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <checkPass+0x130>
    1d10:	8f c0       	rjmp	.+286    	; 0x1e30 <checkPass+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	fe 01       	movw	r30, r28
    1d14:	ff 96       	adiw	r30, 0x3f	; 63
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9e af       	std	Y+62, r25	; 0x3e
    1d28:	8d af       	std	Y+61, r24	; 0x3d
    1d2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2e:	9a af       	std	Y+58, r25	; 0x3a
    1d30:	89 af       	std	Y+57, r24	; 0x39
    1d32:	89 ad       	ldd	r24, Y+57	; 0x39
    1d34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <checkPass+0x17c>
    1d3a:	9a af       	std	Y+58, r25	; 0x3a
    1d3c:	89 af       	std	Y+57, r24	; 0x39
    1d3e:	78 c0       	rjmp	.+240    	; 0x1e30 <checkPass+0x276>
		_delay_ms(50);
		while (!((key >= 0) && (key <= 9))) {

			key = KEYPAD_getPressedKey();
    1d40:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e2 5b       	subi	r30, 0xB2	; 178
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 83       	st	Z, r24
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	a8 e4       	ldi	r26, 0x48	; 72
    1d52:	b2 e4       	ldi	r27, 0x42	; 66
    1d54:	8d ab       	std	Y+53, r24	; 0x35
    1d56:	9e ab       	std	Y+54, r25	; 0x36
    1d58:	af ab       	std	Y+55, r26	; 0x37
    1d5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d60:	8f a9       	ldd	r24, Y+55	; 0x37
    1d62:	98 ad       	ldd	r25, Y+56	; 0x38
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a ef       	ldi	r20, 0xFA	; 250
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	89 ab       	std	Y+49, r24	; 0x31
    1d76:	9a ab       	std	Y+50, r25	; 0x32
    1d78:	ab ab       	std	Y+51, r26	; 0x33
    1d7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d80:	8b a9       	ldd	r24, Y+51	; 0x33
    1d82:	9c a9       	ldd	r25, Y+52	; 0x34
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d90:	88 23       	and	r24, r24
    1d92:	2c f4       	brge	.+10     	; 0x1d9e <checkPass+0x1e4>
		__ticks = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	98 ab       	std	Y+48, r25	; 0x30
    1d9a:	8f a7       	std	Y+47, r24	; 0x2f
    1d9c:	3f c0       	rjmp	.+126    	; 0x1e1c <checkPass+0x262>
	else if (__tmp > 65535)
    1d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1da0:	7a a9       	ldd	r23, Y+50	; 0x32
    1da2:	8b a9       	ldd	r24, Y+51	; 0x33
    1da4:	9c a9       	ldd	r25, Y+52	; 0x34
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	4c f5       	brge	.+82     	; 0x1e08 <checkPass+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db6:	6d a9       	ldd	r22, Y+53	; 0x35
    1db8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dba:	8f a9       	ldd	r24, Y+55	; 0x37
    1dbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	98 ab       	std	Y+48, r25	; 0x30
    1ddc:	8f a7       	std	Y+47, r24	; 0x2f
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <checkPass+0x244>
    1de0:	88 ec       	ldi	r24, 0xC8	; 200
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e a7       	std	Y+46, r25	; 0x2e
    1de6:	8d a7       	std	Y+45, r24	; 0x2d
    1de8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <checkPass+0x232>
    1df0:	9e a7       	std	Y+46, r25	; 0x2e
    1df2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	98 ab       	std	Y+48, r25	; 0x30
    1dfc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e00:	98 a9       	ldd	r25, Y+48	; 0x30
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	69 f7       	brne	.-38     	; 0x1de0 <checkPass+0x226>
    1e06:	14 c0       	rjmp	.+40     	; 0x1e30 <checkPass+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e08:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	98 ab       	std	Y+48, r25	; 0x30
    1e1a:	8f a7       	std	Y+47, r24	; 0x2f
    1e1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e20:	9c a7       	std	Y+44, r25	; 0x2c
    1e22:	8b a7       	std	Y+43, r24	; 0x2b
    1e24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <checkPass+0x26e>
    1e2c:	9c a7       	std	Y+44, r25	; 0x2c
    1e2e:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");

	for (count_key = 0; count_key < 5; count_key++) {
		key = KEYPAD_getPressedKey();
		_delay_ms(50);
		while (!((key >= 0) && (key <= 9))) {
    1e30:	fe 01       	movw	r30, r28
    1e32:	e2 5b       	subi	r30, 0xB2	; 178
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	8a 30       	cpi	r24, 0x0A	; 10
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <checkPass+0x284>
    1e3c:	81 cf       	rjmp	.-254    	; 0x1d40 <checkPass+0x186>

			key = KEYPAD_getPressedKey();
			_delay_ms(50);
		}
		LCD_moveCursor(1, 0);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	0e 94 81 1c 	call	0x3902	; 0x3902 <LCD_moveCursor>
		LCD_displayStringRowColumn(1, count_key, "*");
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 5b       	subi	r30, 0xB3	; 179
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	20 e7       	ldi	r18, 0x70	; 112
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	60 81       	ld	r22, Z
    1e54:	a9 01       	movw	r20, r18
    1e56:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
		pass = pass * 10 + key;
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 5b       	subi	r30, 0xB9	; 185
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	91 81       	ldd	r25, Z+1	; 0x01
    1e64:	a2 81       	ldd	r26, Z+2	; 0x02
    1e66:	b3 81       	ldd	r27, Z+3	; 0x03
    1e68:	2a e0       	ldi	r18, 0x0A	; 10
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__mulsi3>
    1e78:	9b 01       	movw	r18, r22
    1e7a:	ac 01       	movw	r20, r24
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e2 5b       	subi	r30, 0xB2	; 178
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 e0       	ldi	r26, 0x00	; 0
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e9 5b       	subi	r30, 0xB9	; 185
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	82 0f       	add	r24, r18
    1e94:	93 1f       	adc	r25, r19
    1e96:	a4 1f       	adc	r26, r20
    1e98:	b5 1f       	adc	r27, r21
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	aa e7       	ldi	r26, 0x7A	; 122
    1ea8:	b3 e4       	ldi	r27, 0x43	; 67
    1eaa:	8f a3       	std	Y+39, r24	; 0x27
    1eac:	98 a7       	std	Y+40, r25	; 0x28
    1eae:	a9 a7       	std	Y+41, r26	; 0x29
    1eb0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a ef       	ldi	r20, 0xFA	; 250
    1ec0:	54 e4       	ldi	r21, 0x44	; 68
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8b a3       	std	Y+35, r24	; 0x23
    1ecc:	9c a3       	std	Y+36, r25	; 0x24
    1ece:	ad a3       	std	Y+37, r26	; 0x25
    1ed0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <checkPass+0x33a>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9a a3       	std	Y+34, r25	; 0x22
    1ef0:	89 a3       	std	Y+33, r24	; 0x21
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <checkPass+0x3b8>
	else if (__tmp > 65535)
    1ef4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef8:	8d a1       	ldd	r24, Y+37	; 0x25
    1efa:	9e a1       	ldd	r25, Y+38	; 0x26
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <checkPass+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f10:	89 a5       	ldd	r24, Y+41	; 0x29
    1f12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9a a3       	std	Y+34, r25	; 0x22
    1f32:	89 a3       	std	Y+33, r24	; 0x21
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <checkPass+0x39a>
    1f36:	88 ec       	ldi	r24, 0xC8	; 200
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	98 a3       	std	Y+32, r25	; 0x20
    1f3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f40:	98 a1       	ldd	r25, Y+32	; 0x20
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <checkPass+0x388>
    1f46:	98 a3       	std	Y+32, r25	; 0x20
    1f48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <checkPass+0x37c>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <checkPass+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f60:	7c a1       	ldd	r23, Y+36	; 0x24
    1f62:	8d a1       	ldd	r24, Y+37	; 0x25
    1f64:	9e a1       	ldd	r25, Y+38	; 0x26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	89 a1       	ldd	r24, Y+33	; 0x21
    1f74:	9a a1       	ldd	r25, Y+34	; 0x22
    1f76:	9e 8f       	std	Y+30, r25	; 0x1e
    1f78:	8d 8f       	std	Y+29, r24	; 0x1d
    1f7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <checkPass+0x3c4>
    1f82:	9e 8f       	std	Y+30, r25	; 0x1e
    1f84:	8d 8f       	std	Y+29, r24	; 0x1d
	;
	sint32 pass = 0;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");

	for (count_key = 0; count_key < 5; count_key++) {
    1f86:	de 01       	movw	r26, r28
    1f88:	a3 5b       	subi	r26, 0xB3	; 179
    1f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e3 5b       	subi	r30, 0xB3	; 179
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 81       	ld	r24, Z
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	8c 93       	st	X, r24
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e3 5b       	subi	r30, 0xB3	; 179
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	85 30       	cpi	r24, 0x05	; 5
    1fa2:	08 f4       	brcc	.+2      	; 0x1fa6 <checkPass+0x3ec>
    1fa4:	41 ce       	rjmp	.-894    	; 0x1c28 <checkPass+0x6e>
		LCD_displayStringRowColumn(1, count_key, "*");
		pass = pass * 10 + key;
		_delay_ms(250);
	}

	LCD_clearScreen();
    1fa6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	0e 94 81 1c 	call	0x3902	; 0x3902 <LCD_moveCursor>
	LCD_displayString("Press Enter");
    1fb2:	82 e7       	ldi	r24, 0x72	; 114
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <LCD_displayString>
    1fba:	78 c0       	rjmp	.+240    	; 0x20ac <checkPass+0x4f2>

	while (key != '=') {
		key = KEYPAD_getPressedKey();
    1fbc:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e2 5b       	subi	r30, 0xB2	; 178
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 83       	st	Z, r24
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	ac e8       	ldi	r26, 0x8C	; 140
    1fce:	b2 e4       	ldi	r27, 0x42	; 66
    1fd0:	89 8f       	std	Y+25, r24	; 0x19
    1fd2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8d 8b       	std	Y+21, r24	; 0x15
    1ff2:	9e 8b       	std	Y+22, r25	; 0x16
    1ff4:	af 8b       	std	Y+23, r26	; 0x17
    1ff6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <checkPass+0x460>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9c 8b       	std	Y+20, r25	; 0x14
    2016:	8b 8b       	std	Y+19, r24	; 0x13
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <checkPass+0x4de>
	else if (__tmp > 65535)
    201a:	6d 89       	ldd	r22, Y+21	; 0x15
    201c:	7e 89       	ldd	r23, Y+22	; 0x16
    201e:	8f 89       	ldd	r24, Y+23	; 0x17
    2020:	98 8d       	ldd	r25, Y+24	; 0x18
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <checkPass+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	69 8d       	ldd	r22, Y+25	; 0x19
    2034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9c 8b       	std	Y+20, r25	; 0x14
    2058:	8b 8b       	std	Y+19, r24	; 0x13
    205a:	0f c0       	rjmp	.+30     	; 0x207a <checkPass+0x4c0>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9a 8b       	std	Y+18, r25	; 0x12
    2062:	89 8b       	std	Y+17, r24	; 0x11
    2064:	89 89       	ldd	r24, Y+17	; 0x11
    2066:	9a 89       	ldd	r25, Y+18	; 0x12
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <checkPass+0x4ae>
    206c:	9a 8b       	std	Y+18, r25	; 0x12
    206e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8b 89       	ldd	r24, Y+19	; 0x13
    2072:	9c 89       	ldd	r25, Y+20	; 0x14
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9c 8b       	std	Y+20, r25	; 0x14
    2078:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8b 89       	ldd	r24, Y+19	; 0x13
    207c:	9c 89       	ldd	r25, Y+20	; 0x14
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <checkPass+0x4a2>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <checkPass+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6d 89       	ldd	r22, Y+21	; 0x15
    2086:	7e 89       	ldd	r23, Y+22	; 0x16
    2088:	8f 89       	ldd	r24, Y+23	; 0x17
    208a:	98 8d       	ldd	r25, Y+24	; 0x18
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9c 8b       	std	Y+20, r25	; 0x14
    2096:	8b 8b       	std	Y+19, r24	; 0x13
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	9c 89       	ldd	r25, Y+20	; 0x14
    209c:	98 8b       	std	Y+16, r25	; 0x10
    209e:	8f 87       	std	Y+15, r24	; 0x0f
    20a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a2:	98 89       	ldd	r25, Y+16	; 0x10
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <checkPass+0x4ea>
    20a8:	98 8b       	std	Y+16, r25	; 0x10
    20aa:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_clearScreen();
	LCD_moveCursor(0, 0);
	LCD_displayString("Press Enter");

	while (key != '=') {
    20ac:	fe 01       	movw	r30, r28
    20ae:	e2 5b       	subi	r30, 0xB2	; 178
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	8d 33       	cpi	r24, 0x3D	; 61
    20b6:	09 f0       	breq	.+2      	; 0x20ba <checkPass+0x500>
    20b8:	81 cf       	rjmp	.-254    	; 0x1fbc <checkPass+0x402>
		key = KEYPAD_getPressedKey();
		_delay_ms(70);
	}

	UART_sendByte(CHECK_PASS);
    20ba:	84 e0       	ldi	r24, 0x04	; 4
    20bc:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>

	for (count_key = 0; count_key < 5; count_key++) {
    20c0:	fe 01       	movw	r30, r28
    20c2:	e3 5b       	subi	r30, 0xB3	; 179
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	10 82       	st	Z, r1
    20c8:	4a c0       	rjmp	.+148    	; 0x215e <checkPass+0x5a4>
		pass_digit = pass % 10;
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 5b       	subi	r30, 0xB9	; 185
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	a2 81       	ldd	r26, Z+2	; 0x02
    20d6:	b3 81       	ldd	r27, Z+3	; 0x03
    20d8:	2a e0       	ldi	r18, 0x0A	; 10
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 37 21 	call	0x426e	; 0x426e <__divmodsi4>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	fe 01       	movw	r30, r28
    20ee:	e4 5b       	subi	r30, 0xB4	; 180
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 83       	st	Z, r24
		UART_sendByte(pass_digit);
    20f4:	fe 01       	movw	r30, r28
    20f6:	e4 5b       	subi	r30, 0xB4	; 180
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>

		if (UART_recieveByte() == ERROR_PASS) {
    2100:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    2104:	88 23       	and	r24, r24
    2106:	49 f4       	brne	.+18     	; 0x211a <checkPass+0x560>
			pass_error++;
    2108:	de 01       	movw	r26, r28
    210a:	a5 5b       	subi	r26, 0xB5	; 181
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	e5 5b       	subi	r30, 0xB5	; 181
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	8c 93       	st	X, r24
		}
		pass /= 10;
    211a:	8e 01       	movw	r16, r28
    211c:	09 5b       	subi	r16, 0xB9	; 185
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	fe 01       	movw	r30, r28
    2122:	e9 5b       	subi	r30, 0xB9	; 185
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	a2 81       	ldd	r26, Z+2	; 0x02
    212c:	b3 81       	ldd	r27, Z+3	; 0x03
    212e:	2a e0       	ldi	r18, 0x0A	; 10
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 37 21 	call	0x426e	; 0x426e <__divmodsi4>
    213e:	da 01       	movw	r26, r20
    2140:	c9 01       	movw	r24, r18
    2142:	f8 01       	movw	r30, r16
    2144:	80 83       	st	Z, r24
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	a2 83       	std	Z+2, r26	; 0x02
    214a:	b3 83       	std	Z+3, r27	; 0x03
		_delay_ms(70);
	}

	UART_sendByte(CHECK_PASS);

	for (count_key = 0; count_key < 5; count_key++) {
    214c:	de 01       	movw	r26, r28
    214e:	a3 5b       	subi	r26, 0xB3	; 179
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e3 5b       	subi	r30, 0xB3	; 179
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	8c 93       	st	X, r24
    215e:	fe 01       	movw	r30, r28
    2160:	e3 5b       	subi	r30, 0xB3	; 179
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	85 30       	cpi	r24, 0x05	; 5
    2168:	08 f4       	brcc	.+2      	; 0x216c <checkPass+0x5b2>
    216a:	af cf       	rjmp	.-162    	; 0x20ca <checkPass+0x510>
			pass_error++;
		}
		pass /= 10;
	}

	if (pass_error != 0) {
    216c:	fe 01       	movw	r30, r28
    216e:	e5 5b       	subi	r30, 0xB5	; 181
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	88 23       	and	r24, r24
    2176:	09 f4       	brne	.+2      	; 0x217a <checkPass+0x5c0>
    2178:	ba c0       	rjmp	.+372    	; 0x22ee <checkPass+0x734>
		counter_error++;
    217a:	80 91 64 01 	lds	r24, 0x0164
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	80 93 64 01 	sts	0x0164, r24
		UART_sendByte(counter_error);
    2184:	80 91 64 01 	lds	r24, 0x0164
    2188:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>

		if (counter_error < 3) {
    218c:	80 91 64 01 	lds	r24, 0x0164
    2190:	83 30       	cpi	r24, 0x03	; 3
    2192:	08 f0       	brcs	.+2      	; 0x2196 <checkPass+0x5dc>
    2194:	83 c0       	rjmp	.+262    	; 0x229c <checkPass+0x6e2>
			LCD_clearScreen();
    2196:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "INCORRECT PASS");
    219a:	24 ec       	ldi	r18, 0xC4	; 196
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	a9 01       	movw	r20, r18
    21a4:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	aa ef       	ldi	r26, 0xFA	; 250
    21ae:	b3 e4       	ldi	r27, 0x43	; 67
    21b0:	8b 87       	std	Y+11, r24	; 0x0b
    21b2:	9c 87       	std	Y+12, r25	; 0x0c
    21b4:	ad 87       	std	Y+13, r26	; 0x0d
    21b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    21bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21be:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a ef       	ldi	r20, 0xFA	; 250
    21c6:	54 e4       	ldi	r21, 0x44	; 68
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	8f 83       	std	Y+7, r24	; 0x07
    21d2:	98 87       	std	Y+8, r25	; 0x08
    21d4:	a9 87       	std	Y+9, r26	; 0x09
    21d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e8       	ldi	r20, 0x80	; 128
    21e6:	5f e3       	ldi	r21, 0x3F	; 63
    21e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ec:	88 23       	and	r24, r24
    21ee:	2c f4       	brge	.+10     	; 0x21fa <checkPass+0x640>
		__ticks = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	3f c0       	rjmp	.+126    	; 0x2278 <checkPass+0x6be>
	else if (__tmp > 65535)
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	4c f5       	brge	.+82     	; 0x2264 <checkPass+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	6b 85       	ldd	r22, Y+11	; 0x0b
    2214:	7c 85       	ldd	r23, Y+12	; 0x0c
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	0f c0       	rjmp	.+30     	; 0x225a <checkPass+0x6a0>
    223c:	88 ec       	ldi	r24, 0xC8	; 200
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <checkPass+0x68e>
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	69 f7       	brne	.-38     	; 0x223c <checkPass+0x682>
    2262:	14 c0       	rjmp	.+40     	; 0x228c <checkPass+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <checkPass+0x6ca>
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			checkPass(config_ptr);
    228c:	fe 01       	movw	r30, r28
    228e:	e1 5b       	subi	r30, 0xB1	; 177
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <checkPass>
    229a:	2e c0       	rjmp	.+92     	; 0x22f8 <checkPass+0x73e>
		} else {
			LCD_clearScreen();
    229c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>

			Timer_init(config_ptr);
    22a0:	fe 01       	movw	r30, r28
    22a2:	e1 5b       	subi	r30, 0xB1	; 177
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <Timer_init>
			g_tick = 0;
    22ae:	10 92 63 01 	sts	0x0163, r1
    22b2:	10 92 62 01 	sts	0x0162, r1
    22b6:	0e c0       	rjmp	.+28     	; 0x22d4 <checkPass+0x71a>
			while (g_tick != 60) {
				LCD_displayStringRowColumn(0, 0, "Wait 60 Sec");
    22b8:	23 ed       	ldi	r18, 0xD3	; 211
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	a9 01       	movw	r20, r18
    22c2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "ALARM!!!!!!");
    22c6:	2f ed       	ldi	r18, 0xDF	; 223
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	a9 01       	movw	r20, r18
    22d0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
		} else {
			LCD_clearScreen();

			Timer_init(config_ptr);
			g_tick = 0;
			while (g_tick != 60) {
    22d4:	80 91 62 01 	lds	r24, 0x0162
    22d8:	90 91 63 01 	lds	r25, 0x0163
    22dc:	8c 33       	cpi	r24, 0x3C	; 60
    22de:	91 05       	cpc	r25, r1
    22e0:	59 f7       	brne	.-42     	; 0x22b8 <checkPass+0x6fe>
				LCD_displayStringRowColumn(0, 0, "Wait 60 Sec");
				LCD_displayStringRowColumn(1, 0, "ALARM!!!!!!");
			}

			counter_error = 0;
    22e2:	10 92 64 01 	sts	0x0164, r1
			return_flag = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	80 93 65 01 	sts	0x0165, r24
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <checkPass+0x73e>
		}
	} else {
		UART_sendByte(4);
    22ee:	84 e0       	ldi	r24, 0x04	; 4
    22f0:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>
		counter_error = 0;
    22f4:	10 92 64 01 	sts	0x0164, r1
	}
}
    22f8:	c0 5b       	subi	r28, 0xB0	; 176
    22fa:	df 4f       	sbci	r29, 0xFF	; 255
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <Open_Door>:

void Open_Door(const Timer_ConfigType *Config_Ptr) {
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <Open_Door+0x6>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(UNLOCK_DOOR);
    231e:	86 e0       	ldi	r24, 0x06	; 6
    2320:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>

	LCD_clearScreen();
    2324:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	Timer_init(Config_Ptr);
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <Timer_init>
	g_tick = 0;
    2330:	10 92 63 01 	sts	0x0163, r1
    2334:	10 92 62 01 	sts	0x0162, r1
    2338:	07 c0       	rjmp	.+14     	; 0x2348 <Open_Door+0x38>

	while (g_tick != 15) {
		LCD_displayStringRowColumn(0, 0, "Opening Door..");
    233a:	2b ee       	ldi	r18, 0xEB	; 235
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	a9 01       	movw	r20, r18
    2344:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>

	LCD_clearScreen();
	Timer_init(Config_Ptr);
	g_tick = 0;

	while (g_tick != 15) {
    2348:	80 91 62 01 	lds	r24, 0x0162
    234c:	90 91 63 01 	lds	r25, 0x0163
    2350:	8f 30       	cpi	r24, 0x0F	; 15
    2352:	91 05       	cpc	r25, r1
    2354:	91 f7       	brne	.-28     	; 0x233a <Open_Door+0x2a>
		LCD_displayStringRowColumn(0, 0, "Opening Door..");
	}

	LCD_clearScreen();
    2356:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	g_tick = 0;
    235a:	10 92 63 01 	sts	0x0163, r1
    235e:	10 92 62 01 	sts	0x0162, r1
    2362:	07 c0       	rjmp	.+14     	; 0x2372 <Open_Door+0x62>

	while (g_tick != 3) {
		LCD_displayStringRowColumn(0, 0, "Door Opened");
    2364:	2a ef       	ldi	r18, 0xFA	; 250
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	a9 01       	movw	r20, r18
    236e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
	}

	LCD_clearScreen();
	g_tick = 0;

	while (g_tick != 3) {
    2372:	80 91 62 01 	lds	r24, 0x0162
    2376:	90 91 63 01 	lds	r25, 0x0163
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	91 05       	cpc	r25, r1
    237e:	91 f7       	brne	.-28     	; 0x2364 <Open_Door+0x54>
		LCD_displayStringRowColumn(0, 0, "Door Opened");
	}

	if (UART_recieveByte() == HOLD_DOOR) {
    2380:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    2384:	87 30       	cpi	r24, 0x07	; 7
    2386:	71 f4       	brne	.+28     	; 0x23a4 <Open_Door+0x94>
		LCD_displayStringRowColumn(0, 0, "WAIT FOR PEOPLE");
    2388:	26 e0       	ldi	r18, 0x06	; 6
    238a:	31 e0       	ldi	r19, 0x01	; 1
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	a9 01       	movw	r20, r18
    2392:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "TO ENTER");
    2396:	26 e1       	ldi	r18, 0x16	; 22
    2398:	31 e0       	ldi	r19, 0x01	; 1
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	a9 01       	movw	r20, r18
    23a0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
	}

	while (UART_recieveByte() != CLOSE_DOOR) {
    23a4:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    23a8:	88 30       	cpi	r24, 0x08	; 8
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <Open_Door+0x94>
	}

	LCD_clearScreen();
    23ac:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	g_tick = 0;
    23b0:	10 92 63 01 	sts	0x0163, r1
    23b4:	10 92 62 01 	sts	0x0162, r1
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <Open_Door+0xb8>

	while (g_tick != 15) {
		LCD_displayStringRowColumn(0, 0, "Closing Door..");
    23ba:	2f e1       	ldi	r18, 0x1F	; 31
    23bc:	31 e0       	ldi	r19, 0x01	; 1
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	a9 01       	movw	r20, r18
    23c4:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
	}

	LCD_clearScreen();
	g_tick = 0;

	while (g_tick != 15) {
    23c8:	80 91 62 01 	lds	r24, 0x0162
    23cc:	90 91 63 01 	lds	r25, 0x0163
    23d0:	8f 30       	cpi	r24, 0x0F	; 15
    23d2:	91 05       	cpc	r25, r1
    23d4:	91 f7       	brne	.-28     	; 0x23ba <Open_Door+0xaa>
		LCD_displayStringRowColumn(0, 0, "Closing Door..");
	}
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <Main_Menu>:

void Main_Menu(const Timer_ConfigType *Config_Ptr) {
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	61 97       	sbiw	r28, 0x11	; 17
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	99 8b       	std	Y+17, r25	; 0x11
    23f6:	88 8b       	std	Y+16, r24	; 0x10
	uint8 key = 0;
    23f8:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    23fa:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    23fe:	2e e2       	ldi	r18, 0x2E	; 46
    2400:	31 e0       	ldi	r19, 0x01	; 1
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	a9 01       	movw	r20, r18
    2408:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    240c:	2c e3       	ldi	r18, 0x3C	; 60
    240e:	31 e0       	ldi	r19, 0x01	; 1
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	a9 01       	movw	r20, r18
    2416:	0e 94 c3 1c 	call	0x3986	; 0x3986 <LCD_displayStringRowColumn>
    241a:	75 c0       	rjmp	.+234    	; 0x2506 <Main_Menu+0x126>

	while ((key != '+') && (key != '-')) {
		key = KEYPAD_getPressedKey();
    241c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <KEYPAD_getPressedKey>
    2420:	8f 87       	std	Y+15, r24	; 0x0f
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a8 e4       	ldi	r26, 0x48	; 72
    2428:	b2 e4       	ldi	r27, 0x42	; 66
    242a:	8b 87       	std	Y+11, r24	; 0x0b
    242c:	9c 87       	std	Y+12, r25	; 0x0c
    242e:	ad 87       	std	Y+13, r26	; 0x0d
    2430:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2432:	6b 85       	ldd	r22, Y+11	; 0x0b
    2434:	7c 85       	ldd	r23, Y+12	; 0x0c
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	9e 85       	ldd	r25, Y+14	; 0x0e
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a ef       	ldi	r20, 0xFA	; 250
    2440:	54 e4       	ldi	r21, 0x44	; 68
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8f 83       	std	Y+7, r24	; 0x07
    244c:	98 87       	std	Y+8, r25	; 0x08
    244e:	a9 87       	std	Y+9, r26	; 0x09
    2450:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	2c f4       	brge	.+10     	; 0x2474 <Main_Menu+0x94>
		__ticks = 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	8d 83       	std	Y+5, r24	; 0x05
    2472:	3f c0       	rjmp	.+126    	; 0x24f2 <Main_Menu+0x112>
	else if (__tmp > 65535)
    2474:	6f 81       	ldd	r22, Y+7	; 0x07
    2476:	78 85       	ldd	r23, Y+8	; 0x08
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	3f ef       	ldi	r19, 0xFF	; 255
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	57 e4       	ldi	r21, 0x47	; 71
    2484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	4c f5       	brge	.+82     	; 0x24de <Main_Menu+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e2       	ldi	r20, 0x20	; 32
    249a:	51 e4       	ldi	r21, 0x41	; 65
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9e 83       	std	Y+6, r25	; 0x06
    24b2:	8d 83       	std	Y+5, r24	; 0x05
    24b4:	0f c0       	rjmp	.+30     	; 0x24d4 <Main_Menu+0xf4>
    24b6:	88 ec       	ldi	r24, 0xC8	; 200
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <Main_Menu+0xe2>
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	9e 81       	ldd	r25, Y+6	; 0x06
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	8d 81       	ldd	r24, Y+5	; 0x05
    24d6:	9e 81       	ldd	r25, Y+6	; 0x06
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	69 f7       	brne	.-38     	; 0x24b6 <Main_Menu+0xd6>
    24dc:	14 c0       	rjmp	.+40     	; 0x2506 <Main_Menu+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24de:	6f 81       	ldd	r22, Y+7	; 0x07
    24e0:	78 85       	ldd	r23, Y+8	; 0x08
    24e2:	89 85       	ldd	r24, Y+9	; 0x09
    24e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a 81       	ldd	r25, Y+2	; 0x02
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <Main_Menu+0x11e>
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");

	while ((key != '+') && (key != '-')) {
    2506:	8f 85       	ldd	r24, Y+15	; 0x0f
    2508:	8b 32       	cpi	r24, 0x2B	; 43
    250a:	21 f0       	breq	.+8      	; 0x2514 <Main_Menu+0x134>
    250c:	8f 85       	ldd	r24, Y+15	; 0x0f
    250e:	8d 32       	cpi	r24, 0x2D	; 45
    2510:	09 f0       	breq	.+2      	; 0x2514 <Main_Menu+0x134>
    2512:	84 cf       	rjmp	.-248    	; 0x241c <Main_Menu+0x3c>
		key = KEYPAD_getPressedKey();
		_delay_ms(50);
	}

	checkPass(Config_Ptr);
    2514:	88 89       	ldd	r24, Y+16	; 0x10
    2516:	99 89       	ldd	r25, Y+17	; 0x11
    2518:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <checkPass>
	UART_sendByte(return_flag);
    251c:	80 91 65 01 	lds	r24, 0x0165
    2520:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>

	if (return_flag == 0) {
    2524:	80 91 65 01 	lds	r24, 0x0165
    2528:	88 23       	and	r24, r24
    252a:	71 f4       	brne	.+28     	; 0x2548 <Main_Menu+0x168>
		UART_sendByte(key);
    252c:	8f 85       	ldd	r24, Y+15	; 0x0f
    252e:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>
		if (key == '-') {
    2532:	8f 85       	ldd	r24, Y+15	; 0x0f
    2534:	8d 32       	cpi	r24, 0x2D	; 45
    2536:	19 f4       	brne	.+6      	; 0x253e <Main_Menu+0x15e>
			newPass();
    2538:	0e 94 b3 05 	call	0xb66	; 0xb66 <newPass>
    253c:	07 c0       	rjmp	.+14     	; 0x254c <Main_Menu+0x16c>

		} else {
			Open_Door(Config_Ptr);
    253e:	88 89       	ldd	r24, Y+16	; 0x10
    2540:	99 89       	ldd	r25, Y+17	; 0x11
    2542:	0e 94 88 11 	call	0x2310	; 0x2310 <Open_Door>
    2546:	02 c0       	rjmp	.+4      	; 0x254c <Main_Menu+0x16c>
		}
	} else {
		return_flag = 0;
    2548:	10 92 65 01 	sts	0x0165, r1
	}

}
    254c:	61 96       	adiw	r28, 0x11	; 17
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <main>:
 *
 * 							MAIN
 *
 * ************************************************************/

int main() {
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	68 97       	sbiw	r28, 0x18	; 24
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7);
    2572:	af e5       	ldi	r26, 0x5F	; 95
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef e5       	ldi	r30, 0x5F	; 95
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	80 68       	ori	r24, 0x80	; 128
    257e:	8c 93       	st	X, r24
	LCD_init();
    2580:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_init>

	Timer_ConfigType Timer_Config = { 0, 6000, TIMER1, F_CPU_1024, CTC };
    2584:	ce 01       	movw	r24, r28
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	98 8b       	std	Y+16, r25	; 0x10
    258a:	8f 87       	std	Y+15, r24	; 0x0f
    258c:	eb e5       	ldi	r30, 0x5B	; 91
    258e:	f1 e0       	ldi	r31, 0x01	; 1
    2590:	fa 8b       	std	Y+18, r31	; 0x12
    2592:	e9 8b       	std	Y+17, r30	; 0x11
    2594:	f7 e0       	ldi	r31, 0x07	; 7
    2596:	fb 8b       	std	Y+19, r31	; 0x13
    2598:	e9 89       	ldd	r30, Y+17	; 0x11
    259a:	fa 89       	ldd	r31, Y+18	; 0x12
    259c:	00 80       	ld	r0, Z
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	9a 89       	ldd	r25, Y+18	; 0x12
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	9a 8b       	std	Y+18, r25	; 0x12
    25a6:	89 8b       	std	Y+17, r24	; 0x11
    25a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    25aa:	f8 89       	ldd	r31, Y+16	; 0x10
    25ac:	00 82       	st	Z, r0
    25ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b0:	98 89       	ldd	r25, Y+16	; 0x10
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	98 8b       	std	Y+16, r25	; 0x10
    25b6:	8f 87       	std	Y+15, r24	; 0x0f
    25b8:	9b 89       	ldd	r25, Y+19	; 0x13
    25ba:	91 50       	subi	r25, 0x01	; 1
    25bc:	9b 8b       	std	Y+19, r25	; 0x13
    25be:	eb 89       	ldd	r30, Y+19	; 0x13
    25c0:	ee 23       	and	r30, r30
    25c2:	51 f7       	brne	.-44     	; 0x2598 <main+0x3a>
	Timer_setCallBack(&calcTime, TIMER1);
    25c4:	83 ea       	ldi	r24, 0xA3	; 163
    25c6:	95 e0       	ldi	r25, 0x05	; 5
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <Timer_setCallBack>

	UART_ConfigType UART_Config = { EIGHT, DISABLED, SINGLE, 9600 };
    25ce:	ce 01       	movw	r24, r28
    25d0:	08 96       	adiw	r24, 0x08	; 8
    25d2:	9d 8b       	std	Y+21, r25	; 0x15
    25d4:	8c 8b       	std	Y+20, r24	; 0x14
    25d6:	e4 e5       	ldi	r30, 0x54	; 84
    25d8:	f1 e0       	ldi	r31, 0x01	; 1
    25da:	ff 8b       	std	Y+23, r31	; 0x17
    25dc:	ee 8b       	std	Y+22, r30	; 0x16
    25de:	f7 e0       	ldi	r31, 0x07	; 7
    25e0:	f8 8f       	std	Y+24, r31	; 0x18
    25e2:	ee 89       	ldd	r30, Y+22	; 0x16
    25e4:	ff 89       	ldd	r31, Y+23	; 0x17
    25e6:	00 80       	ld	r0, Z
    25e8:	8e 89       	ldd	r24, Y+22	; 0x16
    25ea:	9f 89       	ldd	r25, Y+23	; 0x17
    25ec:	01 96       	adiw	r24, 0x01	; 1
    25ee:	9f 8b       	std	Y+23, r25	; 0x17
    25f0:	8e 8b       	std	Y+22, r24	; 0x16
    25f2:	ec 89       	ldd	r30, Y+20	; 0x14
    25f4:	fd 89       	ldd	r31, Y+21	; 0x15
    25f6:	00 82       	st	Z, r0
    25f8:	8c 89       	ldd	r24, Y+20	; 0x14
    25fa:	9d 89       	ldd	r25, Y+21	; 0x15
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	9d 8b       	std	Y+21, r25	; 0x15
    2600:	8c 8b       	std	Y+20, r24	; 0x14
    2602:	98 8d       	ldd	r25, Y+24	; 0x18
    2604:	91 50       	subi	r25, 0x01	; 1
    2606:	98 8f       	std	Y+24, r25	; 0x18
    2608:	e8 8d       	ldd	r30, Y+24	; 0x18
    260a:	ee 23       	and	r30, r30
    260c:	51 f7       	brne	.-44     	; 0x25e2 <main+0x84>
	UART_init(&UART_Config);
    260e:	ce 01       	movw	r24, r28
    2610:	08 96       	adiw	r24, 0x08	; 8
    2612:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <UART_init>

	UART_sendByte(M1_READY);
    2616:	80 e1       	ldi	r24, 0x10	; 16
    2618:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>
	newPass();
    261c:	0e 94 b3 05 	call	0xb66	; 0xb66 <newPass>

	while (1) {

		Main_Menu(&Timer_Config);
    2620:	ce 01       	movw	r24, r28
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <Main_Menu>
    2628:	fb cf       	rjmp	.-10     	; 0x2620 <main+0xc2>

0000262a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <GPIO_setupPinDirection+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <GPIO_setupPinDirection+0x8>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	6a 83       	std	Y+2, r22	; 0x02
    263c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	88 30       	cpi	r24, 0x08	; 8
    2642:	08 f0       	brcs	.+2      	; 0x2646 <GPIO_setupPinDirection+0x1c>
    2644:	d5 c0       	rjmp	.+426    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	08 f0       	brcs	.+2      	; 0x264e <GPIO_setupPinDirection+0x24>
    264c:	d1 c0       	rjmp	.+418    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	3d 83       	std	Y+5, r19	; 0x05
    2656:	2c 83       	std	Y+4, r18	; 0x04
    2658:	8c 81       	ldd	r24, Y+4	; 0x04
    265a:	9d 81       	ldd	r25, Y+5	; 0x05
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	91 05       	cpc	r25, r1
    2660:	09 f4       	brne	.+2      	; 0x2664 <GPIO_setupPinDirection+0x3a>
    2662:	43 c0       	rjmp	.+134    	; 0x26ea <GPIO_setupPinDirection+0xc0>
    2664:	2c 81       	ldd	r18, Y+4	; 0x04
    2666:	3d 81       	ldd	r19, Y+5	; 0x05
    2668:	22 30       	cpi	r18, 0x02	; 2
    266a:	31 05       	cpc	r19, r1
    266c:	2c f4       	brge	.+10     	; 0x2678 <GPIO_setupPinDirection+0x4e>
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	71 f0       	breq	.+28     	; 0x2692 <GPIO_setupPinDirection+0x68>
    2676:	bc c0       	rjmp	.+376    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	22 30       	cpi	r18, 0x02	; 2
    267e:	31 05       	cpc	r19, r1
    2680:	09 f4       	brne	.+2      	; 0x2684 <GPIO_setupPinDirection+0x5a>
    2682:	5f c0       	rjmp	.+190    	; 0x2742 <GPIO_setupPinDirection+0x118>
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	83 30       	cpi	r24, 0x03	; 3
    268a:	91 05       	cpc	r25, r1
    268c:	09 f4       	brne	.+2      	; 0x2690 <GPIO_setupPinDirection+0x66>
    268e:	85 c0       	rjmp	.+266    	; 0x279a <GPIO_setupPinDirection+0x170>
    2690:	af c0       	rjmp	.+350    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	a1 f4       	brne	.+40     	; 0x26c0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2698:	aa e3       	ldi	r26, 0x3A	; 58
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	ea e3       	ldi	r30, 0x3A	; 58
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	48 2f       	mov	r20, r24
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	02 2e       	mov	r0, r18
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <GPIO_setupPinDirection+0x8c>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	0a 94       	dec	r0
    26b8:	e2 f7       	brpl	.-8      	; 0x26b2 <GPIO_setupPinDirection+0x88>
    26ba:	84 2b       	or	r24, r20
    26bc:	8c 93       	st	X, r24
    26be:	98 c0       	rjmp	.+304    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    26c0:	aa e3       	ldi	r26, 0x3A	; 58
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	ea e3       	ldi	r30, 0x3A	; 58
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	48 2f       	mov	r20, r24
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	02 2e       	mov	r0, r18
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <GPIO_setupPinDirection+0xb4>
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	0a 94       	dec	r0
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <GPIO_setupPinDirection+0xb0>
    26e2:	80 95       	com	r24
    26e4:	84 23       	and	r24, r20
    26e6:	8c 93       	st	X, r24
    26e8:	83 c0       	rjmp	.+262    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	a1 f4       	brne	.+40     	; 0x2718 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    26f0:	a7 e3       	ldi	r26, 0x37	; 55
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e7 e3       	ldi	r30, 0x37	; 55
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	48 2f       	mov	r20, r24
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	02 2e       	mov	r0, r18
    2708:	02 c0       	rjmp	.+4      	; 0x270e <GPIO_setupPinDirection+0xe4>
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	0a 94       	dec	r0
    2710:	e2 f7       	brpl	.-8      	; 0x270a <GPIO_setupPinDirection+0xe0>
    2712:	84 2b       	or	r24, r20
    2714:	8c 93       	st	X, r24
    2716:	6c c0       	rjmp	.+216    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2718:	a7 e3       	ldi	r26, 0x37	; 55
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e7 e3       	ldi	r30, 0x37	; 55
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	48 2f       	mov	r20, r24
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	02 2e       	mov	r0, r18
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <GPIO_setupPinDirection+0x10c>
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	0a 94       	dec	r0
    2738:	e2 f7       	brpl	.-8      	; 0x2732 <GPIO_setupPinDirection+0x108>
    273a:	80 95       	com	r24
    273c:	84 23       	and	r24, r20
    273e:	8c 93       	st	X, r24
    2740:	57 c0       	rjmp	.+174    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	a1 f4       	brne	.+40     	; 0x2770 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2748:	a4 e3       	ldi	r26, 0x34	; 52
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e4 e3       	ldi	r30, 0x34	; 52
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <GPIO_setupPinDirection+0x13c>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <GPIO_setupPinDirection+0x138>
    276a:	84 2b       	or	r24, r20
    276c:	8c 93       	st	X, r24
    276e:	40 c0       	rjmp	.+128    	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2770:	a4 e3       	ldi	r26, 0x34	; 52
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e4 e3       	ldi	r30, 0x34	; 52
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	48 2f       	mov	r20, r24
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 2e       	mov	r0, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <GPIO_setupPinDirection+0x164>
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <GPIO_setupPinDirection+0x160>
    2792:	80 95       	com	r24
    2794:	84 23       	and	r24, r20
    2796:	8c 93       	st	X, r24
    2798:	2b c0       	rjmp	.+86     	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	a1 f4       	brne	.+40     	; 0x27c8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    27a0:	a1 e3       	ldi	r26, 0x31	; 49
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e1 e3       	ldi	r30, 0x31	; 49
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	48 2f       	mov	r20, r24
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	02 2e       	mov	r0, r18
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <GPIO_setupPinDirection+0x194>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	0a 94       	dec	r0
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <GPIO_setupPinDirection+0x190>
    27c2:	84 2b       	or	r24, r20
    27c4:	8c 93       	st	X, r24
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    27c8:	a1 e3       	ldi	r26, 0x31	; 49
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e1 e3       	ldi	r30, 0x31	; 49
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	48 2f       	mov	r20, r24
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	02 2e       	mov	r0, r18
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <GPIO_setupPinDirection+0x1bc>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	0a 94       	dec	r0
    27e8:	e2 f7       	brpl	.-8      	; 0x27e2 <GPIO_setupPinDirection+0x1b8>
    27ea:	80 95       	com	r24
    27ec:	84 23       	and	r24, r20
    27ee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <GPIO_writePin+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <GPIO_writePin+0x8>
    2808:	0f 92       	push	r0
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	6a 83       	std	Y+2, r22	; 0x02
    2812:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	88 30       	cpi	r24, 0x08	; 8
    2818:	08 f0       	brcs	.+2      	; 0x281c <GPIO_writePin+0x1c>
    281a:	d5 c0       	rjmp	.+426    	; 0x29c6 <GPIO_writePin+0x1c6>
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	84 30       	cpi	r24, 0x04	; 4
    2820:	08 f0       	brcs	.+2      	; 0x2824 <GPIO_writePin+0x24>
    2822:	d1 c0       	rjmp	.+418    	; 0x29c6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	3d 83       	std	Y+5, r19	; 0x05
    282c:	2c 83       	std	Y+4, r18	; 0x04
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
    2830:	9d 81       	ldd	r25, Y+5	; 0x05
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	91 05       	cpc	r25, r1
    2836:	09 f4       	brne	.+2      	; 0x283a <GPIO_writePin+0x3a>
    2838:	43 c0       	rjmp	.+134    	; 0x28c0 <GPIO_writePin+0xc0>
    283a:	2c 81       	ldd	r18, Y+4	; 0x04
    283c:	3d 81       	ldd	r19, Y+5	; 0x05
    283e:	22 30       	cpi	r18, 0x02	; 2
    2840:	31 05       	cpc	r19, r1
    2842:	2c f4       	brge	.+10     	; 0x284e <GPIO_writePin+0x4e>
    2844:	8c 81       	ldd	r24, Y+4	; 0x04
    2846:	9d 81       	ldd	r25, Y+5	; 0x05
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	71 f0       	breq	.+28     	; 0x2868 <GPIO_writePin+0x68>
    284c:	bc c0       	rjmp	.+376    	; 0x29c6 <GPIO_writePin+0x1c6>
    284e:	2c 81       	ldd	r18, Y+4	; 0x04
    2850:	3d 81       	ldd	r19, Y+5	; 0x05
    2852:	22 30       	cpi	r18, 0x02	; 2
    2854:	31 05       	cpc	r19, r1
    2856:	09 f4       	brne	.+2      	; 0x285a <GPIO_writePin+0x5a>
    2858:	5f c0       	rjmp	.+190    	; 0x2918 <GPIO_writePin+0x118>
    285a:	8c 81       	ldd	r24, Y+4	; 0x04
    285c:	9d 81       	ldd	r25, Y+5	; 0x05
    285e:	83 30       	cpi	r24, 0x03	; 3
    2860:	91 05       	cpc	r25, r1
    2862:	09 f4       	brne	.+2      	; 0x2866 <GPIO_writePin+0x66>
    2864:	85 c0       	rjmp	.+266    	; 0x2970 <GPIO_writePin+0x170>
    2866:	af c0       	rjmp	.+350    	; 0x29c6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	a1 f4       	brne	.+40     	; 0x2896 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    286e:	ab e3       	ldi	r26, 0x3B	; 59
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	eb e3       	ldi	r30, 0x3B	; 59
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	48 2f       	mov	r20, r24
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	02 2e       	mov	r0, r18
    2886:	02 c0       	rjmp	.+4      	; 0x288c <GPIO_writePin+0x8c>
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	0a 94       	dec	r0
    288e:	e2 f7       	brpl	.-8      	; 0x2888 <GPIO_writePin+0x88>
    2890:	84 2b       	or	r24, r20
    2892:	8c 93       	st	X, r24
    2894:	98 c0       	rjmp	.+304    	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2896:	ab e3       	ldi	r26, 0x3B	; 59
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	eb e3       	ldi	r30, 0x3B	; 59
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	48 2f       	mov	r20, r24
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	02 2e       	mov	r0, r18
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <GPIO_writePin+0xb4>
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	0a 94       	dec	r0
    28b6:	e2 f7       	brpl	.-8      	; 0x28b0 <GPIO_writePin+0xb0>
    28b8:	80 95       	com	r24
    28ba:	84 23       	and	r24, r20
    28bc:	8c 93       	st	X, r24
    28be:	83 c0       	rjmp	.+262    	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	a1 f4       	brne	.+40     	; 0x28ee <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    28c6:	a8 e3       	ldi	r26, 0x38	; 56
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e8 e3       	ldi	r30, 0x38	; 56
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	48 2f       	mov	r20, r24
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	02 2e       	mov	r0, r18
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <GPIO_writePin+0xe4>
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	0a 94       	dec	r0
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <GPIO_writePin+0xe0>
    28e8:	84 2b       	or	r24, r20
    28ea:	8c 93       	st	X, r24
    28ec:	6c c0       	rjmp	.+216    	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    28ee:	a8 e3       	ldi	r26, 0x38	; 56
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e8 e3       	ldi	r30, 0x38	; 56
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	48 2f       	mov	r20, r24
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	02 2e       	mov	r0, r18
    2906:	02 c0       	rjmp	.+4      	; 0x290c <GPIO_writePin+0x10c>
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	0a 94       	dec	r0
    290e:	e2 f7       	brpl	.-8      	; 0x2908 <GPIO_writePin+0x108>
    2910:	80 95       	com	r24
    2912:	84 23       	and	r24, r20
    2914:	8c 93       	st	X, r24
    2916:	57 c0       	rjmp	.+174    	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	a1 f4       	brne	.+40     	; 0x2946 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    291e:	a5 e3       	ldi	r26, 0x35	; 53
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e5 e3       	ldi	r30, 0x35	; 53
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	48 2f       	mov	r20, r24
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	02 2e       	mov	r0, r18
    2936:	02 c0       	rjmp	.+4      	; 0x293c <GPIO_writePin+0x13c>
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	0a 94       	dec	r0
    293e:	e2 f7       	brpl	.-8      	; 0x2938 <GPIO_writePin+0x138>
    2940:	84 2b       	or	r24, r20
    2942:	8c 93       	st	X, r24
    2944:	40 c0       	rjmp	.+128    	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2946:	a5 e3       	ldi	r26, 0x35	; 53
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e5 e3       	ldi	r30, 0x35	; 53
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	48 2f       	mov	r20, r24
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	02 2e       	mov	r0, r18
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <GPIO_writePin+0x164>
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	0a 94       	dec	r0
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <GPIO_writePin+0x160>
    2968:	80 95       	com	r24
    296a:	84 23       	and	r24, r20
    296c:	8c 93       	st	X, r24
    296e:	2b c0       	rjmp	.+86     	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	a1 f4       	brne	.+40     	; 0x299e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2976:	a2 e3       	ldi	r26, 0x32	; 50
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e2 e3       	ldi	r30, 0x32	; 50
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	48 2f       	mov	r20, r24
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	02 2e       	mov	r0, r18
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <GPIO_writePin+0x194>
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	0a 94       	dec	r0
    2996:	e2 f7       	brpl	.-8      	; 0x2990 <GPIO_writePin+0x190>
    2998:	84 2b       	or	r24, r20
    299a:	8c 93       	st	X, r24
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    299e:	a2 e3       	ldi	r26, 0x32	; 50
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e2 e3       	ldi	r30, 0x32	; 50
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	48 2f       	mov	r20, r24
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	02 2e       	mov	r0, r18
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <GPIO_writePin+0x1bc>
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	0a 94       	dec	r0
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <GPIO_writePin+0x1b8>
    29c0:	80 95       	com	r24
    29c2:	84 23       	and	r24, r20
    29c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	00 d0       	rcall	.+0      	; 0x29dc <GPIO_readPin+0x6>
    29dc:	00 d0       	rcall	.+0      	; 0x29de <GPIO_readPin+0x8>
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    29e8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	88 30       	cpi	r24, 0x08	; 8
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <GPIO_readPin+0x1c>
    29f0:	84 c0       	rjmp	.+264    	; 0x2afa <GPIO_readPin+0x124>
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	84 30       	cpi	r24, 0x04	; 4
    29f6:	08 f0       	brcs	.+2      	; 0x29fa <GPIO_readPin+0x24>
    29f8:	80 c0       	rjmp	.+256    	; 0x2afa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	3d 83       	std	Y+5, r19	; 0x05
    2a02:	2c 83       	std	Y+4, r18	; 0x04
    2a04:	4c 81       	ldd	r20, Y+4	; 0x04
    2a06:	5d 81       	ldd	r21, Y+5	; 0x05
    2a08:	41 30       	cpi	r20, 0x01	; 1
    2a0a:	51 05       	cpc	r21, r1
    2a0c:	79 f1       	breq	.+94     	; 0x2a6c <GPIO_readPin+0x96>
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	9d 81       	ldd	r25, Y+5	; 0x05
    2a12:	82 30       	cpi	r24, 0x02	; 2
    2a14:	91 05       	cpc	r25, r1
    2a16:	34 f4       	brge	.+12     	; 0x2a24 <GPIO_readPin+0x4e>
    2a18:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1c:	21 15       	cp	r18, r1
    2a1e:	31 05       	cpc	r19, r1
    2a20:	69 f0       	breq	.+26     	; 0x2a3c <GPIO_readPin+0x66>
    2a22:	6b c0       	rjmp	.+214    	; 0x2afa <GPIO_readPin+0x124>
    2a24:	4c 81       	ldd	r20, Y+4	; 0x04
    2a26:	5d 81       	ldd	r21, Y+5	; 0x05
    2a28:	42 30       	cpi	r20, 0x02	; 2
    2a2a:	51 05       	cpc	r21, r1
    2a2c:	b9 f1       	breq	.+110    	; 0x2a9c <GPIO_readPin+0xc6>
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	9d 81       	ldd	r25, Y+5	; 0x05
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	91 05       	cpc	r25, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <GPIO_readPin+0x64>
    2a38:	49 c0       	rjmp	.+146    	; 0x2acc <GPIO_readPin+0xf6>
    2a3a:	5f c0       	rjmp	.+190    	; 0x2afa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2a3c:	e9 e3       	ldi	r30, 0x39	; 57
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a9 01       	movw	r20, r18
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <GPIO_readPin+0x7e>
    2a50:	55 95       	asr	r21
    2a52:	47 95       	ror	r20
    2a54:	8a 95       	dec	r24
    2a56:	e2 f7       	brpl	.-8      	; 0x2a50 <GPIO_readPin+0x7a>
    2a58:	ca 01       	movw	r24, r20
    2a5a:	81 70       	andi	r24, 0x01	; 1
    2a5c:	90 70       	andi	r25, 0x00	; 0
    2a5e:	88 23       	and	r24, r24
    2a60:	19 f0       	breq	.+6      	; 0x2a68 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	49 c0       	rjmp	.+146    	; 0x2afa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	47 c0       	rjmp	.+142    	; 0x2afa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2a6c:	e6 e3       	ldi	r30, 0x36	; 54
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a9 01       	movw	r20, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <GPIO_readPin+0xae>
    2a80:	55 95       	asr	r21
    2a82:	47 95       	ror	r20
    2a84:	8a 95       	dec	r24
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <GPIO_readPin+0xaa>
    2a88:	ca 01       	movw	r24, r20
    2a8a:	81 70       	andi	r24, 0x01	; 1
    2a8c:	90 70       	andi	r25, 0x00	; 0
    2a8e:	88 23       	and	r24, r24
    2a90:	19 f0       	breq	.+6      	; 0x2a98 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	31 c0       	rjmp	.+98     	; 0x2afa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a98:	19 82       	std	Y+1, r1	; 0x01
    2a9a:	2f c0       	rjmp	.+94     	; 0x2afa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2a9c:	e3 e3       	ldi	r30, 0x33	; 51
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	88 2f       	mov	r24, r24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a9 01       	movw	r20, r18
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <GPIO_readPin+0xde>
    2ab0:	55 95       	asr	r21
    2ab2:	47 95       	ror	r20
    2ab4:	8a 95       	dec	r24
    2ab6:	e2 f7       	brpl	.-8      	; 0x2ab0 <GPIO_readPin+0xda>
    2ab8:	ca 01       	movw	r24, r20
    2aba:	81 70       	andi	r24, 0x01	; 1
    2abc:	90 70       	andi	r25, 0x00	; 0
    2abe:	88 23       	and	r24, r24
    2ac0:	19 f0       	breq	.+6      	; 0x2ac8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	19 c0       	rjmp	.+50     	; 0x2afa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2ac8:	19 82       	std	Y+1, r1	; 0x01
    2aca:	17 c0       	rjmp	.+46     	; 0x2afa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2acc:	e0 e3       	ldi	r30, 0x30	; 48
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a9 01       	movw	r20, r18
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <GPIO_readPin+0x10e>
    2ae0:	55 95       	asr	r21
    2ae2:	47 95       	ror	r20
    2ae4:	8a 95       	dec	r24
    2ae6:	e2 f7       	brpl	.-8      	; 0x2ae0 <GPIO_readPin+0x10a>
    2ae8:	ca 01       	movw	r24, r20
    2aea:	81 70       	andi	r24, 0x01	; 1
    2aec:	90 70       	andi	r25, 0x00	; 0
    2aee:	88 23       	and	r24, r24
    2af0:	19 f0       	breq	.+6      	; 0x2af8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	01 c0       	rjmp	.+2      	; 0x2afa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2af8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <GPIO_setupPortDirection+0x6>
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <GPIO_setupPortDirection+0x8>
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	84 30       	cpi	r24, 0x04	; 4
    2b20:	90 f5       	brcc	.+100    	; 0x2b86 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	3c 83       	std	Y+4, r19	; 0x04
    2b2a:	2b 83       	std	Y+3, r18	; 0x03
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	91 05       	cpc	r25, r1
    2b34:	d1 f0       	breq	.+52     	; 0x2b6a <GPIO_setupPortDirection+0x5e>
    2b36:	2b 81       	ldd	r18, Y+3	; 0x03
    2b38:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3a:	22 30       	cpi	r18, 0x02	; 2
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <GPIO_setupPortDirection+0x3e>
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	61 f0       	breq	.+24     	; 0x2b60 <GPIO_setupPortDirection+0x54>
    2b48:	1e c0       	rjmp	.+60     	; 0x2b86 <GPIO_setupPortDirection+0x7a>
    2b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4e:	22 30       	cpi	r18, 0x02	; 2
    2b50:	31 05       	cpc	r19, r1
    2b52:	81 f0       	breq	.+32     	; 0x2b74 <GPIO_setupPortDirection+0x68>
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	9c 81       	ldd	r25, Y+4	; 0x04
    2b58:	83 30       	cpi	r24, 0x03	; 3
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	81 f0       	breq	.+32     	; 0x2b7e <GPIO_setupPortDirection+0x72>
    2b5e:	13 c0       	rjmp	.+38     	; 0x2b86 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2b60:	ea e3       	ldi	r30, 0x3A	; 58
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	80 83       	st	Z, r24
    2b68:	0e c0       	rjmp	.+28     	; 0x2b86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2b6a:	e7 e3       	ldi	r30, 0x37	; 55
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	80 83       	st	Z, r24
    2b72:	09 c0       	rjmp	.+18     	; 0x2b86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2b74:	e4 e3       	ldi	r30, 0x34	; 52
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	80 83       	st	Z, r24
    2b7c:	04 c0       	rjmp	.+8      	; 0x2b86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2b7e:	e1 e3       	ldi	r30, 0x31	; 49
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	80 83       	st	Z, r24
			break;
		}
	}
}
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <GPIO_writePort+0x6>
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <GPIO_writePort+0x8>
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	84 30       	cpi	r24, 0x04	; 4
    2ba8:	90 f5       	brcc	.+100    	; 0x2c0e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	3c 83       	std	Y+4, r19	; 0x04
    2bb2:	2b 83       	std	Y+3, r18	; 0x03
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	81 30       	cpi	r24, 0x01	; 1
    2bba:	91 05       	cpc	r25, r1
    2bbc:	d1 f0       	breq	.+52     	; 0x2bf2 <GPIO_writePort+0x5e>
    2bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc2:	22 30       	cpi	r18, 0x02	; 2
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <GPIO_writePort+0x3e>
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	61 f0       	breq	.+24     	; 0x2be8 <GPIO_writePort+0x54>
    2bd0:	1e c0       	rjmp	.+60     	; 0x2c0e <GPIO_writePort+0x7a>
    2bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd6:	22 30       	cpi	r18, 0x02	; 2
    2bd8:	31 05       	cpc	r19, r1
    2bda:	81 f0       	breq	.+32     	; 0x2bfc <GPIO_writePort+0x68>
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	83 30       	cpi	r24, 0x03	; 3
    2be2:	91 05       	cpc	r25, r1
    2be4:	81 f0       	breq	.+32     	; 0x2c06 <GPIO_writePort+0x72>
    2be6:	13 c0       	rjmp	.+38     	; 0x2c0e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2be8:	eb e3       	ldi	r30, 0x3B	; 59
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	80 83       	st	Z, r24
    2bf0:	0e c0       	rjmp	.+28     	; 0x2c0e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2bf2:	e8 e3       	ldi	r30, 0x38	; 56
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	80 83       	st	Z, r24
    2bfa:	09 c0       	rjmp	.+18     	; 0x2c0e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2bfc:	e5 e3       	ldi	r30, 0x35	; 53
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	8a 81       	ldd	r24, Y+2	; 0x02
    2c02:	80 83       	st	Z, r24
    2c04:	04 c0       	rjmp	.+8      	; 0x2c0e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2c06:	e2 e3       	ldi	r30, 0x32	; 50
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <GPIO_readPort+0x6>
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <GPIO_readPort+0x8>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2c2a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	84 30       	cpi	r24, 0x04	; 4
    2c30:	90 f5       	brcc	.+100    	; 0x2c96 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	3c 83       	std	Y+4, r19	; 0x04
    2c3a:	2b 83       	std	Y+3, r18	; 0x03
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 05       	cpc	r25, r1
    2c44:	d1 f0       	breq	.+52     	; 0x2c7a <GPIO_readPort+0x5e>
    2c46:	2b 81       	ldd	r18, Y+3	; 0x03
    2c48:	3c 81       	ldd	r19, Y+4	; 0x04
    2c4a:	22 30       	cpi	r18, 0x02	; 2
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <GPIO_readPort+0x3e>
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	61 f0       	breq	.+24     	; 0x2c70 <GPIO_readPort+0x54>
    2c58:	1e c0       	rjmp	.+60     	; 0x2c96 <GPIO_readPort+0x7a>
    2c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5e:	22 30       	cpi	r18, 0x02	; 2
    2c60:	31 05       	cpc	r19, r1
    2c62:	81 f0       	breq	.+32     	; 0x2c84 <GPIO_readPort+0x68>
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	83 30       	cpi	r24, 0x03	; 3
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	81 f0       	breq	.+32     	; 0x2c8e <GPIO_readPort+0x72>
    2c6e:	13 c0       	rjmp	.+38     	; 0x2c96 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2c70:	e9 e3       	ldi	r30, 0x39	; 57
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	0e c0       	rjmp	.+28     	; 0x2c96 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2c7a:	e6 e3       	ldi	r30, 0x36	; 54
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	09 c0       	rjmp	.+18     	; 0x2c96 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2c84:	e3 e3       	ldi	r30, 0x33	; 51
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	04 c0       	rjmp	.+8      	; 0x2c96 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2c8e:	e0 e3       	ldi	r30, 0x30	; 48
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	60 97       	sbiw	r28, 0x10	; 16
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	62 e0       	ldi	r22, 0x02	; 2
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	63 e0       	ldi	r22, 0x03	; 3
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	64 e0       	ldi	r22, 0x04	; 4
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	65 e0       	ldi	r22, 0x05	; 5
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	66 e0       	ldi	r22, 0x06	; 6
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	67 e0       	ldi	r22, 0x07	; 7
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2d0a:	1f 86       	std	Y+15, r1	; 0x0f
    2d0c:	ab c0       	rjmp	.+342    	; 0x2e64 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d12:	41 e0       	ldi	r20, 0x01	; 1
    2d14:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2d22:	18 8a       	std	Y+16, r1	; 0x10
    2d24:	22 c0       	rjmp	.+68     	; 0x2d6a <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2d26:	88 89       	ldd	r24, Y+16	; 0x10
    2d28:	98 2f       	mov	r25, r24
    2d2a:	9c 5f       	subi	r25, 0xFC	; 252
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	69 2f       	mov	r22, r25
    2d30:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <GPIO_readPin>
    2d34:	88 23       	and	r24, r24
    2d36:	b1 f4       	brne	.+44     	; 0x2d64 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	98 2f       	mov	r25, r24
    2d48:	88 89       	ldd	r24, Y+16	; 0x10
    2d4a:	89 0f       	add	r24, r25
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2d52:	60 96       	adiw	r28, 0x10	; 16
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2d64:	88 89       	ldd	r24, Y+16	; 0x10
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	88 8b       	std	Y+16, r24	; 0x10
    2d6a:	88 89       	ldd	r24, Y+16	; 0x10
    2d6c:	84 30       	cpi	r24, 0x04	; 4
    2d6e:	d8 f2       	brcs	.-74     	; 0x2d26 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e2       	ldi	r26, 0x20	; 32
    2d80:	b1 e4       	ldi	r27, 0x41	; 65
    2d82:	8b 87       	std	Y+11, r24	; 0x0b
    2d84:	9c 87       	std	Y+12, r25	; 0x0c
    2d86:	ad 87       	std	Y+13, r26	; 0x0d
    2d88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a ef       	ldi	r20, 0xFA	; 250
    2d98:	54 e4       	ldi	r21, 0x44	; 68
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	8f 83       	std	Y+7, r24	; 0x07
    2da4:	98 87       	std	Y+8, r25	; 0x08
    2da6:	a9 87       	std	Y+9, r26	; 0x09
    2da8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2daa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dac:	78 85       	ldd	r23, Y+8	; 0x08
    2dae:	89 85       	ldd	r24, Y+9	; 0x09
    2db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	3f c0       	rjmp	.+126    	; 0x2e4a <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	4c f5       	brge	.+82     	; 0x2e36 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9e 83       	std	Y+6, r25	; 0x06
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <KEYPAD_getPressedKey+0x186>
    2e0e:	88 ec       	ldi	r24, 0xC8	; 200
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9c 83       	std	Y+4, r25	; 0x04
    2e14:	8b 83       	std	Y+3, r24	; 0x03
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <KEYPAD_getPressedKey+0x174>
    2e1e:	9c 83       	std	Y+4, r25	; 0x04
    2e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	69 f7       	brne	.-38     	; 0x2e0e <KEYPAD_getPressedKey+0x168>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	9a 81       	ldd	r25, Y+2	; 0x02
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <KEYPAD_getPressedKey+0x1b0>
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	8f 87       	std	Y+15, r24	; 0x0f
    2e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e66:	84 30       	cpi	r24, 0x04	; 4
    2e68:	08 f4       	brcc	.+2      	; 0x2e6c <KEYPAD_getPressedKey+0x1c6>
    2e6a:	51 cf       	rjmp	.-350    	; 0x2d0e <KEYPAD_getPressedKey+0x68>
    2e6c:	4e cf       	rjmp	.-356    	; 0x2d0a <KEYPAD_getPressedKey+0x64>

00002e6e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2e7c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	3c 83       	std	Y+4, r19	; 0x04
    2e86:	2b 83       	std	Y+3, r18	; 0x03
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	88 30       	cpi	r24, 0x08	; 8
    2e8e:	91 05       	cpc	r25, r1
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2e92:	70 c0       	rjmp	.+224    	; 0x2f74 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2e94:	2b 81       	ldd	r18, Y+3	; 0x03
    2e96:	3c 81       	ldd	r19, Y+4	; 0x04
    2e98:	29 30       	cpi	r18, 0x09	; 9
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	5c f5       	brge	.+86     	; 0x2ef4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	84 30       	cpi	r24, 0x04	; 4
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2ea8:	59 c0       	rjmp	.+178    	; 0x2f5c <KEYPAD_4x4_adjustKeyNumber+0xee>
    2eaa:	2b 81       	ldd	r18, Y+3	; 0x03
    2eac:	3c 81       	ldd	r19, Y+4	; 0x04
    2eae:	25 30       	cpi	r18, 0x05	; 5
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	9c f4       	brge	.+38     	; 0x2eda <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	91 05       	cpc	r25, r1
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2ebe:	48 c0       	rjmp	.+144    	; 0x2f50 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec4:	23 30       	cpi	r18, 0x03	; 3
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	0c f0       	brlt	.+2      	; 0x2ecc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2eca:	45 c0       	rjmp	.+138    	; 0x2f56 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	81 30       	cpi	r24, 0x01	; 1
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2ed6:	39 c0       	rjmp	.+114    	; 0x2f4a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2ed8:	67 c0       	rjmp	.+206    	; 0x2fa8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2eda:	2b 81       	ldd	r18, Y+3	; 0x03
    2edc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ede:	26 30       	cpi	r18, 0x06	; 6
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2ee4:	41 c0       	rjmp	.+130    	; 0x2f68 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	87 30       	cpi	r24, 0x07	; 7
    2eec:	91 05       	cpc	r25, r1
    2eee:	0c f0       	brlt	.+2      	; 0x2ef2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2ef0:	3e c0       	rjmp	.+124    	; 0x2f6e <KEYPAD_4x4_adjustKeyNumber+0x100>
    2ef2:	37 c0       	rjmp	.+110    	; 0x2f62 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef8:	2c 30       	cpi	r18, 0x0C	; 12
    2efa:	31 05       	cpc	r19, r1
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2efe:	46 c0       	rjmp	.+140    	; 0x2f8c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	9c 81       	ldd	r25, Y+4	; 0x04
    2f04:	8d 30       	cpi	r24, 0x0D	; 13
    2f06:	91 05       	cpc	r25, r1
    2f08:	5c f4       	brge	.+22     	; 0x2f20 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2f0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f0e:	2a 30       	cpi	r18, 0x0A	; 10
    2f10:	31 05       	cpc	r19, r1
    2f12:	b1 f1       	breq	.+108    	; 0x2f80 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	9c 81       	ldd	r25, Y+4	; 0x04
    2f18:	8b 30       	cpi	r24, 0x0B	; 11
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	a4 f5       	brge	.+104    	; 0x2f86 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2f1e:	2d c0       	rjmp	.+90     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2f20:	2b 81       	ldd	r18, Y+3	; 0x03
    2f22:	3c 81       	ldd	r19, Y+4	; 0x04
    2f24:	2e 30       	cpi	r18, 0x0E	; 14
    2f26:	31 05       	cpc	r19, r1
    2f28:	b9 f1       	breq	.+110    	; 0x2f98 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	8e 30       	cpi	r24, 0x0E	; 14
    2f30:	91 05       	cpc	r25, r1
    2f32:	7c f1       	brlt	.+94     	; 0x2f92 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2f34:	2b 81       	ldd	r18, Y+3	; 0x03
    2f36:	3c 81       	ldd	r19, Y+4	; 0x04
    2f38:	2f 30       	cpi	r18, 0x0F	; 15
    2f3a:	31 05       	cpc	r19, r1
    2f3c:	79 f1       	breq	.+94     	; 0x2f9c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	80 31       	cpi	r24, 0x10	; 16
    2f44:	91 05       	cpc	r25, r1
    2f46:	69 f1       	breq	.+90     	; 0x2fa2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2f48:	2f c0       	rjmp	.+94     	; 0x2fa8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2f4a:	87 e0       	ldi	r24, 0x07	; 7
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	2e c0       	rjmp	.+92     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2f50:	88 e0       	ldi	r24, 0x08	; 8
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	2b c0       	rjmp	.+86     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2f56:	89 e0       	ldi	r24, 0x09	; 9
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	28 c0       	rjmp	.+80     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2f5c:	85 e2       	ldi	r24, 0x25	; 37
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	25 c0       	rjmp	.+74     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2f62:	84 e0       	ldi	r24, 0x04	; 4
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	22 c0       	rjmp	.+68     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2f68:	85 e0       	ldi	r24, 0x05	; 5
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	1f c0       	rjmp	.+62     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2f6e:	86 e0       	ldi	r24, 0x06	; 6
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	1c c0       	rjmp	.+56     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2f74:	8a e2       	ldi	r24, 0x2A	; 42
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	19 c0       	rjmp	.+50     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	16 c0       	rjmp	.+44     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	13 c0       	rjmp	.+38     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2f86:	83 e0       	ldi	r24, 0x03	; 3
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	10 c0       	rjmp	.+32     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2f8c:	8d e2       	ldi	r24, 0x2D	; 45
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	0d c0       	rjmp	.+26     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2f92:	8d e0       	ldi	r24, 0x0D	; 13
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	0a c0       	rjmp	.+20     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2f98:	19 82       	std	Y+1, r1	; 0x01
    2f9a:	08 c0       	rjmp	.+16     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2f9c:	8d e3       	ldi	r24, 0x3D	; 61
    2f9e:	89 83       	std	Y+1, r24	; 0x01
    2fa0:	05 c0       	rjmp	.+10     	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2fa2:	8b e2       	ldi	r24, 0x2B	; 43
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	2e 97       	sbiw	r28, 0x0e	; 14
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	60 e0       	ldi	r22, 0x00	; 0
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 15 13 	call	0x262a	; 0x262a <GPIO_setupPinDirection>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	a0 ea       	ldi	r26, 0xA0	; 160
    2fea:	b1 e4       	ldi	r27, 0x41	; 65
    2fec:	8b 87       	std	Y+11, r24	; 0x0b
    2fee:	9c 87       	std	Y+12, r25	; 0x0c
    2ff0:	ad 87       	std	Y+13, r26	; 0x0d
    2ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a ef       	ldi	r20, 0xFA	; 250
    3002:	54 e4       	ldi	r21, 0x44	; 68
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	8f 83       	std	Y+7, r24	; 0x07
    300e:	98 87       	std	Y+8, r25	; 0x08
    3010:	a9 87       	std	Y+9, r26	; 0x09
    3012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3014:	6f 81       	ldd	r22, Y+7	; 0x07
    3016:	78 85       	ldd	r23, Y+8	; 0x08
    3018:	89 85       	ldd	r24, Y+9	; 0x09
    301a:	9a 85       	ldd	r25, Y+10	; 0x0a
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	2c f4       	brge	.+10     	; 0x3036 <LCD_init+0x7a>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9e 83       	std	Y+6, r25	; 0x06
    3032:	8d 83       	std	Y+5, r24	; 0x05
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3036:	6f 81       	ldd	r22, Y+7	; 0x07
    3038:	78 85       	ldd	r23, Y+8	; 0x08
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	9a 85       	ldd	r25, Y+10	; 0x0a
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	4c f5       	brge	.+82     	; 0x30a0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3050:	7c 85       	ldd	r23, Y+12	; 0x0c
    3052:	8d 85       	ldd	r24, Y+13	; 0x0d
    3054:	9e 85       	ldd	r25, Y+14	; 0x0e
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	51 e4       	ldi	r21, 0x41	; 65
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	0f c0       	rjmp	.+30     	; 0x3096 <LCD_init+0xda>
    3078:	88 ec       	ldi	r24, 0xC8	; 200
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_init+0xc8>
    3088:	9c 83       	std	Y+4, r25	; 0x04
    308a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308c:	8d 81       	ldd	r24, Y+5	; 0x05
    308e:	9e 81       	ldd	r25, Y+6	; 0x06
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	69 f7       	brne	.-38     	; 0x3078 <LCD_init+0xbc>
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	6f 81       	ldd	r22, Y+7	; 0x07
    30a2:	78 85       	ldd	r23, Y+8	; 0x08
    30a4:	89 85       	ldd	r24, Y+9	; 0x09
    30a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCD_init+0x104>
    30c4:	9a 83       	std	Y+2, r25	; 0x02
    30c6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	6f ef       	ldi	r22, 0xFF	; 255
    30cc:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    30d0:	88 e3       	ldi	r24, 0x38	; 56
    30d2:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    30d6:	8c e0       	ldi	r24, 0x0C	; 12
    30d8:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <LCD_sendCommand>
}
    30e2:	2e 96       	adiw	r28, 0x0e	; 14
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	e9 97       	sbiw	r28, 0x39	; 57
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	a0 e8       	ldi	r26, 0x80	; 128
    311a:	bf e3       	ldi	r27, 0x3F	; 63
    311c:	8d ab       	std	Y+53, r24	; 0x35
    311e:	9e ab       	std	Y+54, r25	; 0x36
    3120:	af ab       	std	Y+55, r26	; 0x37
    3122:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3124:	6d a9       	ldd	r22, Y+53	; 0x35
    3126:	7e a9       	ldd	r23, Y+54	; 0x36
    3128:	8f a9       	ldd	r24, Y+55	; 0x37
    312a:	98 ad       	ldd	r25, Y+56	; 0x38
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	4a ef       	ldi	r20, 0xFA	; 250
    3132:	54 e4       	ldi	r21, 0x44	; 68
    3134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	89 ab       	std	Y+49, r24	; 0x31
    313e:	9a ab       	std	Y+50, r25	; 0x32
    3140:	ab ab       	std	Y+51, r26	; 0x33
    3142:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3144:	69 a9       	ldd	r22, Y+49	; 0x31
    3146:	7a a9       	ldd	r23, Y+50	; 0x32
    3148:	8b a9       	ldd	r24, Y+51	; 0x33
    314a:	9c a9       	ldd	r25, Y+52	; 0x34
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e8       	ldi	r20, 0x80	; 128
    3152:	5f e3       	ldi	r21, 0x3F	; 63
    3154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3158:	88 23       	and	r24, r24
    315a:	2c f4       	brge	.+10     	; 0x3166 <LCD_sendCommand+0x72>
		__ticks = 1;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	98 ab       	std	Y+48, r25	; 0x30
    3162:	8f a7       	std	Y+47, r24	; 0x2f
    3164:	3f c0       	rjmp	.+126    	; 0x31e4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3166:	69 a9       	ldd	r22, Y+49	; 0x31
    3168:	7a a9       	ldd	r23, Y+50	; 0x32
    316a:	8b a9       	ldd	r24, Y+51	; 0x33
    316c:	9c a9       	ldd	r25, Y+52	; 0x34
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	3f ef       	ldi	r19, 0xFF	; 255
    3172:	4f e7       	ldi	r20, 0x7F	; 127
    3174:	57 e4       	ldi	r21, 0x47	; 71
    3176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317a:	18 16       	cp	r1, r24
    317c:	4c f5       	brge	.+82     	; 0x31d0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317e:	6d a9       	ldd	r22, Y+53	; 0x35
    3180:	7e a9       	ldd	r23, Y+54	; 0x36
    3182:	8f a9       	ldd	r24, Y+55	; 0x37
    3184:	98 ad       	ldd	r25, Y+56	; 0x38
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e2       	ldi	r20, 0x20	; 32
    318c:	51 e4       	ldi	r21, 0x41	; 65
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	98 ab       	std	Y+48, r25	; 0x30
    31a4:	8f a7       	std	Y+47, r24	; 0x2f
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <LCD_sendCommand+0xd2>
    31a8:	88 ec       	ldi	r24, 0xC8	; 200
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	9e a7       	std	Y+46, r25	; 0x2e
    31ae:	8d a7       	std	Y+45, r24	; 0x2d
    31b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    31b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <LCD_sendCommand+0xc0>
    31b8:	9e a7       	std	Y+46, r25	; 0x2e
    31ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    31be:	98 a9       	ldd	r25, Y+48	; 0x30
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	98 ab       	std	Y+48, r25	; 0x30
    31c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c8:	98 a9       	ldd	r25, Y+48	; 0x30
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	69 f7       	brne	.-38     	; 0x31a8 <LCD_sendCommand+0xb4>
    31ce:	14 c0       	rjmp	.+40     	; 0x31f8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d0:	69 a9       	ldd	r22, Y+49	; 0x31
    31d2:	7a a9       	ldd	r23, Y+50	; 0x32
    31d4:	8b a9       	ldd	r24, Y+51	; 0x33
    31d6:	9c a9       	ldd	r25, Y+52	; 0x34
    31d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	98 ab       	std	Y+48, r25	; 0x30
    31e2:	8f a7       	std	Y+47, r24	; 0x2f
    31e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e6:	98 a9       	ldd	r25, Y+48	; 0x30
    31e8:	9c a7       	std	Y+44, r25	; 0x2c
    31ea:	8b a7       	std	Y+43, r24	; 0x2b
    31ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <LCD_sendCommand+0xfc>
    31f4:	9c a7       	std	Y+44, r25	; 0x2c
    31f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e8       	ldi	r26, 0x80	; 128
    3208:	bf e3       	ldi	r27, 0x3F	; 63
    320a:	8f a3       	std	Y+39, r24	; 0x27
    320c:	98 a7       	std	Y+40, r25	; 0x28
    320e:	a9 a7       	std	Y+41, r26	; 0x29
    3210:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6f a1       	ldd	r22, Y+39	; 0x27
    3214:	78 a5       	ldd	r23, Y+40	; 0x28
    3216:	89 a5       	ldd	r24, Y+41	; 0x29
    3218:	9a a5       	ldd	r25, Y+42	; 0x2a
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8b a3       	std	Y+35, r24	; 0x23
    322c:	9c a3       	std	Y+36, r25	; 0x24
    322e:	ad a3       	std	Y+37, r26	; 0x25
    3230:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3232:	6b a1       	ldd	r22, Y+35	; 0x23
    3234:	7c a1       	ldd	r23, Y+36	; 0x24
    3236:	8d a1       	ldd	r24, Y+37	; 0x25
    3238:	9e a1       	ldd	r25, Y+38	; 0x26
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <LCD_sendCommand+0x160>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9a a3       	std	Y+34, r25	; 0x22
    3250:	89 a3       	std	Y+33, r24	; 0x21
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3254:	6b a1       	ldd	r22, Y+35	; 0x23
    3256:	7c a1       	ldd	r23, Y+36	; 0x24
    3258:	8d a1       	ldd	r24, Y+37	; 0x25
    325a:	9e a1       	ldd	r25, Y+38	; 0x26
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6f a1       	ldd	r22, Y+39	; 0x27
    326e:	78 a5       	ldd	r23, Y+40	; 0x28
    3270:	89 a5       	ldd	r24, Y+41	; 0x29
    3272:	9a a5       	ldd	r25, Y+42	; 0x2a
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9a a3       	std	Y+34, r25	; 0x22
    3292:	89 a3       	std	Y+33, r24	; 0x21
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <LCD_sendCommand+0x1c0>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	98 a3       	std	Y+32, r25	; 0x20
    329c:	8f 8f       	std	Y+31, r24	; 0x1f
    329e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a0:	98 a1       	ldd	r25, Y+32	; 0x20
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_sendCommand+0x1ae>
    32a6:	98 a3       	std	Y+32, r25	; 0x20
    32a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	89 a1       	ldd	r24, Y+33	; 0x21
    32ac:	9a a1       	ldd	r25, Y+34	; 0x22
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	9a a3       	std	Y+34, r25	; 0x22
    32b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	89 a1       	ldd	r24, Y+33	; 0x21
    32b6:	9a a1       	ldd	r25, Y+34	; 0x22
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <LCD_sendCommand+0x1a2>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	6b a1       	ldd	r22, Y+35	; 0x23
    32c0:	7c a1       	ldd	r23, Y+36	; 0x24
    32c2:	8d a1       	ldd	r24, Y+37	; 0x25
    32c4:	9e a1       	ldd	r25, Y+38	; 0x26
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9a a3       	std	Y+34, r25	; 0x22
    32d0:	89 a3       	std	Y+33, r24	; 0x21
    32d2:	89 a1       	ldd	r24, Y+33	; 0x21
    32d4:	9a a1       	ldd	r25, Y+34	; 0x22
    32d6:	9e 8f       	std	Y+30, r25	; 0x1e
    32d8:	8d 8f       	std	Y+29, r24	; 0x1d
    32da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_sendCommand+0x1ea>
    32e2:	9e 8f       	std	Y+30, r25	; 0x1e
    32e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	69 ad       	ldd	r22, Y+57	; 0x39
    32ea:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <GPIO_writePort>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 e8       	ldi	r26, 0x80	; 128
    32f4:	bf e3       	ldi	r27, 0x3F	; 63
    32f6:	89 8f       	std	Y+25, r24	; 0x19
    32f8:	9a 8f       	std	Y+26, r25	; 0x1a
    32fa:	ab 8f       	std	Y+27, r26	; 0x1b
    32fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	4a ef       	ldi	r20, 0xFA	; 250
    330c:	54 e4       	ldi	r21, 0x44	; 68
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	8d 8b       	std	Y+21, r24	; 0x15
    3318:	9e 8b       	std	Y+22, r25	; 0x16
    331a:	af 8b       	std	Y+23, r26	; 0x17
    331c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331e:	6d 89       	ldd	r22, Y+21	; 0x15
    3320:	7e 89       	ldd	r23, Y+22	; 0x16
    3322:	8f 89       	ldd	r24, Y+23	; 0x17
    3324:	98 8d       	ldd	r25, Y+24	; 0x18
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	2c f4       	brge	.+10     	; 0x3340 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9c 8b       	std	Y+20, r25	; 0x14
    333c:	8b 8b       	std	Y+19, r24	; 0x13
    333e:	3f c0       	rjmp	.+126    	; 0x33be <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3340:	6d 89       	ldd	r22, Y+21	; 0x15
    3342:	7e 89       	ldd	r23, Y+22	; 0x16
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	3f ef       	ldi	r19, 0xFF	; 255
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	57 e4       	ldi	r21, 0x47	; 71
    3350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	4c f5       	brge	.+82     	; 0x33aa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3358:	69 8d       	ldd	r22, Y+25	; 0x19
    335a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e2       	ldi	r20, 0x20	; 32
    3366:	51 e4       	ldi	r21, 0x41	; 65
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9c 8b       	std	Y+20, r25	; 0x14
    337e:	8b 8b       	std	Y+19, r24	; 0x13
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <LCD_sendCommand+0x2ac>
    3382:	88 ec       	ldi	r24, 0xC8	; 200
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9a 8b       	std	Y+18, r25	; 0x12
    3388:	89 8b       	std	Y+17, r24	; 0x11
    338a:	89 89       	ldd	r24, Y+17	; 0x11
    338c:	9a 89       	ldd	r25, Y+18	; 0x12
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <LCD_sendCommand+0x29a>
    3392:	9a 8b       	std	Y+18, r25	; 0x12
    3394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	8b 89       	ldd	r24, Y+19	; 0x13
    3398:	9c 89       	ldd	r25, Y+20	; 0x14
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	9c 8b       	std	Y+20, r25	; 0x14
    339e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a0:	8b 89       	ldd	r24, Y+19	; 0x13
    33a2:	9c 89       	ldd	r25, Y+20	; 0x14
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	69 f7       	brne	.-38     	; 0x3382 <LCD_sendCommand+0x28e>
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	6d 89       	ldd	r22, Y+21	; 0x15
    33ac:	7e 89       	ldd	r23, Y+22	; 0x16
    33ae:	8f 89       	ldd	r24, Y+23	; 0x17
    33b0:	98 8d       	ldd	r25, Y+24	; 0x18
    33b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9c 8b       	std	Y+20, r25	; 0x14
    33bc:	8b 8b       	std	Y+19, r24	; 0x13
    33be:	8b 89       	ldd	r24, Y+19	; 0x13
    33c0:	9c 89       	ldd	r25, Y+20	; 0x14
    33c2:	98 8b       	std	Y+16, r25	; 0x10
    33c4:	8f 87       	std	Y+15, r24	; 0x0f
    33c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c8:	98 89       	ldd	r25, Y+16	; 0x10
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <LCD_sendCommand+0x2d6>
    33ce:	98 8b       	std	Y+16, r25	; 0x10
    33d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	a0 e8       	ldi	r26, 0x80	; 128
    33e2:	bf e3       	ldi	r27, 0x3F	; 63
    33e4:	8b 87       	std	Y+11, r24	; 0x0b
    33e6:	9c 87       	std	Y+12, r25	; 0x0c
    33e8:	ad 87       	std	Y+13, r26	; 0x0d
    33ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	4a ef       	ldi	r20, 0xFA	; 250
    33fa:	54 e4       	ldi	r21, 0x44	; 68
    33fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	8f 83       	std	Y+7, r24	; 0x07
    3406:	98 87       	std	Y+8, r25	; 0x08
    3408:	a9 87       	std	Y+9, r26	; 0x09
    340a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    340c:	6f 81       	ldd	r22, Y+7	; 0x07
    340e:	78 85       	ldd	r23, Y+8	; 0x08
    3410:	89 85       	ldd	r24, Y+9	; 0x09
    3412:	9a 85       	ldd	r25, Y+10	; 0x0a
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e8       	ldi	r20, 0x80	; 128
    341a:	5f e3       	ldi	r21, 0x3F	; 63
    341c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3420:	88 23       	and	r24, r24
    3422:	2c f4       	brge	.+10     	; 0x342e <LCD_sendCommand+0x33a>
		__ticks = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
    342c:	3f c0       	rjmp	.+126    	; 0x34ac <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	3f ef       	ldi	r19, 0xFF	; 255
    343a:	4f e7       	ldi	r20, 0x7F	; 127
    343c:	57 e4       	ldi	r21, 0x47	; 71
    343e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3442:	18 16       	cp	r1, r24
    3444:	4c f5       	brge	.+82     	; 0x3498 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3446:	6b 85       	ldd	r22, Y+11	; 0x0b
    3448:	7c 85       	ldd	r23, Y+12	; 0x0c
    344a:	8d 85       	ldd	r24, Y+13	; 0x0d
    344c:	9e 85       	ldd	r25, Y+14	; 0x0e
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e2       	ldi	r20, 0x20	; 32
    3454:	51 e4       	ldi	r21, 0x41	; 65
    3456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	9e 83       	std	Y+6, r25	; 0x06
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	0f c0       	rjmp	.+30     	; 0x348e <LCD_sendCommand+0x39a>
    3470:	88 ec       	ldi	r24, 0xC8	; 200
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	9c 83       	std	Y+4, r25	; 0x04
    3476:	8b 83       	std	Y+3, r24	; 0x03
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
    347a:	9c 81       	ldd	r25, Y+4	; 0x04
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <LCD_sendCommand+0x388>
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
    3486:	9e 81       	ldd	r25, Y+6	; 0x06
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	69 f7       	brne	.-38     	; 0x3470 <LCD_sendCommand+0x37c>
    3496:	14 c0       	rjmp	.+40     	; 0x34c0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3498:	6f 81       	ldd	r22, Y+7	; 0x07
    349a:	78 85       	ldd	r23, Y+8	; 0x08
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	9e 81       	ldd	r25, Y+6	; 0x06
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <LCD_sendCommand+0x3c4>
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    34c0:	e9 96       	adiw	r28, 0x39	; 57
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	e9 97       	sbiw	r28, 0x39	; 57
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	41 e0       	ldi	r20, 0x01	; 1
    34ee:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	a0 e8       	ldi	r26, 0x80	; 128
    34f8:	bf e3       	ldi	r27, 0x3F	; 63
    34fa:	8d ab       	std	Y+53, r24	; 0x35
    34fc:	9e ab       	std	Y+54, r25	; 0x36
    34fe:	af ab       	std	Y+55, r26	; 0x37
    3500:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3502:	6d a9       	ldd	r22, Y+53	; 0x35
    3504:	7e a9       	ldd	r23, Y+54	; 0x36
    3506:	8f a9       	ldd	r24, Y+55	; 0x37
    3508:	98 ad       	ldd	r25, Y+56	; 0x38
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	4a ef       	ldi	r20, 0xFA	; 250
    3510:	54 e4       	ldi	r21, 0x44	; 68
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	89 ab       	std	Y+49, r24	; 0x31
    351c:	9a ab       	std	Y+50, r25	; 0x32
    351e:	ab ab       	std	Y+51, r26	; 0x33
    3520:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3522:	69 a9       	ldd	r22, Y+49	; 0x31
    3524:	7a a9       	ldd	r23, Y+50	; 0x32
    3526:	8b a9       	ldd	r24, Y+51	; 0x33
    3528:	9c a9       	ldd	r25, Y+52	; 0x34
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	2c f4       	brge	.+10     	; 0x3544 <LCD_displayCharacter+0x72>
		__ticks = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	98 ab       	std	Y+48, r25	; 0x30
    3540:	8f a7       	std	Y+47, r24	; 0x2f
    3542:	3f c0       	rjmp	.+126    	; 0x35c2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3544:	69 a9       	ldd	r22, Y+49	; 0x31
    3546:	7a a9       	ldd	r23, Y+50	; 0x32
    3548:	8b a9       	ldd	r24, Y+51	; 0x33
    354a:	9c a9       	ldd	r25, Y+52	; 0x34
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	4f e7       	ldi	r20, 0x7F	; 127
    3552:	57 e4       	ldi	r21, 0x47	; 71
    3554:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3558:	18 16       	cp	r1, r24
    355a:	4c f5       	brge	.+82     	; 0x35ae <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355c:	6d a9       	ldd	r22, Y+53	; 0x35
    355e:	7e a9       	ldd	r23, Y+54	; 0x36
    3560:	8f a9       	ldd	r24, Y+55	; 0x37
    3562:	98 ad       	ldd	r25, Y+56	; 0x38
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e2       	ldi	r20, 0x20	; 32
    356a:	51 e4       	ldi	r21, 0x41	; 65
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	98 ab       	std	Y+48, r25	; 0x30
    3582:	8f a7       	std	Y+47, r24	; 0x2f
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <LCD_displayCharacter+0xd2>
    3586:	88 ec       	ldi	r24, 0xC8	; 200
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	9e a7       	std	Y+46, r25	; 0x2e
    358c:	8d a7       	std	Y+45, r24	; 0x2d
    358e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3590:	9e a5       	ldd	r25, Y+46	; 0x2e
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <LCD_displayCharacter+0xc0>
    3596:	9e a7       	std	Y+46, r25	; 0x2e
    3598:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359a:	8f a5       	ldd	r24, Y+47	; 0x2f
    359c:	98 a9       	ldd	r25, Y+48	; 0x30
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	98 ab       	std	Y+48, r25	; 0x30
    35a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a6:	98 a9       	ldd	r25, Y+48	; 0x30
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	69 f7       	brne	.-38     	; 0x3586 <LCD_displayCharacter+0xb4>
    35ac:	14 c0       	rjmp	.+40     	; 0x35d6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	69 a9       	ldd	r22, Y+49	; 0x31
    35b0:	7a a9       	ldd	r23, Y+50	; 0x32
    35b2:	8b a9       	ldd	r24, Y+51	; 0x33
    35b4:	9c a9       	ldd	r25, Y+52	; 0x34
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	98 ab       	std	Y+48, r25	; 0x30
    35c0:	8f a7       	std	Y+47, r24	; 0x2f
    35c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c4:	98 a9       	ldd	r25, Y+48	; 0x30
    35c6:	9c a7       	std	Y+44, r25	; 0x2c
    35c8:	8b a7       	std	Y+43, r24	; 0x2b
    35ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    35cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <LCD_displayCharacter+0xfc>
    35d2:	9c a7       	std	Y+44, r25	; 0x2c
    35d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    35da:	41 e0       	ldi	r20, 0x01	; 1
    35dc:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 e8       	ldi	r26, 0x80	; 128
    35e6:	bf e3       	ldi	r27, 0x3F	; 63
    35e8:	8f a3       	std	Y+39, r24	; 0x27
    35ea:	98 a7       	std	Y+40, r25	; 0x28
    35ec:	a9 a7       	std	Y+41, r26	; 0x29
    35ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	6f a1       	ldd	r22, Y+39	; 0x27
    35f2:	78 a5       	ldd	r23, Y+40	; 0x28
    35f4:	89 a5       	ldd	r24, Y+41	; 0x29
    35f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a ef       	ldi	r20, 0xFA	; 250
    35fe:	54 e4       	ldi	r21, 0x44	; 68
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	8b a3       	std	Y+35, r24	; 0x23
    360a:	9c a3       	std	Y+36, r25	; 0x24
    360c:	ad a3       	std	Y+37, r26	; 0x25
    360e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3610:	6b a1       	ldd	r22, Y+35	; 0x23
    3612:	7c a1       	ldd	r23, Y+36	; 0x24
    3614:	8d a1       	ldd	r24, Y+37	; 0x25
    3616:	9e a1       	ldd	r25, Y+38	; 0x26
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	2c f4       	brge	.+10     	; 0x3632 <LCD_displayCharacter+0x160>
		__ticks = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9a a3       	std	Y+34, r25	; 0x22
    362e:	89 a3       	std	Y+33, r24	; 0x21
    3630:	3f c0       	rjmp	.+126    	; 0x36b0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3632:	6b a1       	ldd	r22, Y+35	; 0x23
    3634:	7c a1       	ldd	r23, Y+36	; 0x24
    3636:	8d a1       	ldd	r24, Y+37	; 0x25
    3638:	9e a1       	ldd	r25, Y+38	; 0x26
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	4c f5       	brge	.+82     	; 0x369c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364a:	6f a1       	ldd	r22, Y+39	; 0x27
    364c:	78 a5       	ldd	r23, Y+40	; 0x28
    364e:	89 a5       	ldd	r24, Y+41	; 0x29
    3650:	9a a5       	ldd	r25, Y+42	; 0x2a
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9a a3       	std	Y+34, r25	; 0x22
    3670:	89 a3       	std	Y+33, r24	; 0x21
    3672:	0f c0       	rjmp	.+30     	; 0x3692 <LCD_displayCharacter+0x1c0>
    3674:	88 ec       	ldi	r24, 0xC8	; 200
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	98 a3       	std	Y+32, r25	; 0x20
    367a:	8f 8f       	std	Y+31, r24	; 0x1f
    367c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    367e:	98 a1       	ldd	r25, Y+32	; 0x20
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <LCD_displayCharacter+0x1ae>
    3684:	98 a3       	std	Y+32, r25	; 0x20
    3686:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	89 a1       	ldd	r24, Y+33	; 0x21
    368a:	9a a1       	ldd	r25, Y+34	; 0x22
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	9a a3       	std	Y+34, r25	; 0x22
    3690:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3692:	89 a1       	ldd	r24, Y+33	; 0x21
    3694:	9a a1       	ldd	r25, Y+34	; 0x22
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	69 f7       	brne	.-38     	; 0x3674 <LCD_displayCharacter+0x1a2>
    369a:	14 c0       	rjmp	.+40     	; 0x36c4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369c:	6b a1       	ldd	r22, Y+35	; 0x23
    369e:	7c a1       	ldd	r23, Y+36	; 0x24
    36a0:	8d a1       	ldd	r24, Y+37	; 0x25
    36a2:	9e a1       	ldd	r25, Y+38	; 0x26
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9a a3       	std	Y+34, r25	; 0x22
    36ae:	89 a3       	std	Y+33, r24	; 0x21
    36b0:	89 a1       	ldd	r24, Y+33	; 0x21
    36b2:	9a a1       	ldd	r25, Y+34	; 0x22
    36b4:	9e 8f       	std	Y+30, r25	; 0x1e
    36b6:	8d 8f       	std	Y+29, r24	; 0x1d
    36b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <LCD_displayCharacter+0x1ea>
    36c0:	9e 8f       	std	Y+30, r25	; 0x1e
    36c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	69 ad       	ldd	r22, Y+57	; 0x39
    36c8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <GPIO_writePort>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	a0 e8       	ldi	r26, 0x80	; 128
    36d2:	bf e3       	ldi	r27, 0x3F	; 63
    36d4:	89 8f       	std	Y+25, r24	; 0x19
    36d6:	9a 8f       	std	Y+26, r25	; 0x1a
    36d8:	ab 8f       	std	Y+27, r26	; 0x1b
    36da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36dc:	69 8d       	ldd	r22, Y+25	; 0x19
    36de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a ef       	ldi	r20, 0xFA	; 250
    36ea:	54 e4       	ldi	r21, 0x44	; 68
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	8d 8b       	std	Y+21, r24	; 0x15
    36f6:	9e 8b       	std	Y+22, r25	; 0x16
    36f8:	af 8b       	std	Y+23, r26	; 0x17
    36fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36fc:	6d 89       	ldd	r22, Y+21	; 0x15
    36fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3700:	8f 89       	ldd	r24, Y+23	; 0x17
    3702:	98 8d       	ldd	r25, Y+24	; 0x18
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	2c f4       	brge	.+10     	; 0x371e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	9c 8b       	std	Y+20, r25	; 0x14
    371a:	8b 8b       	std	Y+19, r24	; 0x13
    371c:	3f c0       	rjmp	.+126    	; 0x379c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    371e:	6d 89       	ldd	r22, Y+21	; 0x15
    3720:	7e 89       	ldd	r23, Y+22	; 0x16
    3722:	8f 89       	ldd	r24, Y+23	; 0x17
    3724:	98 8d       	ldd	r25, Y+24	; 0x18
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	3f ef       	ldi	r19, 0xFF	; 255
    372a:	4f e7       	ldi	r20, 0x7F	; 127
    372c:	57 e4       	ldi	r21, 0x47	; 71
    372e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3732:	18 16       	cp	r1, r24
    3734:	4c f5       	brge	.+82     	; 0x3788 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3736:	69 8d       	ldd	r22, Y+25	; 0x19
    3738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    373a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    373c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9c 8b       	std	Y+20, r25	; 0x14
    375c:	8b 8b       	std	Y+19, r24	; 0x13
    375e:	0f c0       	rjmp	.+30     	; 0x377e <LCD_displayCharacter+0x2ac>
    3760:	88 ec       	ldi	r24, 0xC8	; 200
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9a 8b       	std	Y+18, r25	; 0x12
    3766:	89 8b       	std	Y+17, r24	; 0x11
    3768:	89 89       	ldd	r24, Y+17	; 0x11
    376a:	9a 89       	ldd	r25, Y+18	; 0x12
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <LCD_displayCharacter+0x29a>
    3770:	9a 8b       	std	Y+18, r25	; 0x12
    3772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3774:	8b 89       	ldd	r24, Y+19	; 0x13
    3776:	9c 89       	ldd	r25, Y+20	; 0x14
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	9c 8b       	std	Y+20, r25	; 0x14
    377c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377e:	8b 89       	ldd	r24, Y+19	; 0x13
    3780:	9c 89       	ldd	r25, Y+20	; 0x14
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	69 f7       	brne	.-38     	; 0x3760 <LCD_displayCharacter+0x28e>
    3786:	14 c0       	rjmp	.+40     	; 0x37b0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3788:	6d 89       	ldd	r22, Y+21	; 0x15
    378a:	7e 89       	ldd	r23, Y+22	; 0x16
    378c:	8f 89       	ldd	r24, Y+23	; 0x17
    378e:	98 8d       	ldd	r25, Y+24	; 0x18
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	9c 8b       	std	Y+20, r25	; 0x14
    379a:	8b 8b       	std	Y+19, r24	; 0x13
    379c:	8b 89       	ldd	r24, Y+19	; 0x13
    379e:	9c 89       	ldd	r25, Y+20	; 0x14
    37a0:	98 8b       	std	Y+16, r25	; 0x10
    37a2:	8f 87       	std	Y+15, r24	; 0x0f
    37a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37a6:	98 89       	ldd	r25, Y+16	; 0x10
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <LCD_displayCharacter+0x2d6>
    37ac:	98 8b       	std	Y+16, r25	; 0x10
    37ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	61 e0       	ldi	r22, 0x01	; 1
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	0e 94 00 14 	call	0x2800	; 0x2800 <GPIO_writePin>
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	a0 e8       	ldi	r26, 0x80	; 128
    37c0:	bf e3       	ldi	r27, 0x3F	; 63
    37c2:	8b 87       	std	Y+11, r24	; 0x0b
    37c4:	9c 87       	std	Y+12, r25	; 0x0c
    37c6:	ad 87       	std	Y+13, r26	; 0x0d
    37c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    37cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	4a ef       	ldi	r20, 0xFA	; 250
    37d8:	54 e4       	ldi	r21, 0x44	; 68
    37da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	8f 83       	std	Y+7, r24	; 0x07
    37e4:	98 87       	std	Y+8, r25	; 0x08
    37e6:	a9 87       	std	Y+9, r26	; 0x09
    37e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ea:	6f 81       	ldd	r22, Y+7	; 0x07
    37ec:	78 85       	ldd	r23, Y+8	; 0x08
    37ee:	89 85       	ldd	r24, Y+9	; 0x09
    37f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e8       	ldi	r20, 0x80	; 128
    37f8:	5f e3       	ldi	r21, 0x3F	; 63
    37fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37fe:	88 23       	and	r24, r24
    3800:	2c f4       	brge	.+10     	; 0x380c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
    380a:	3f c0       	rjmp	.+126    	; 0x388a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    380c:	6f 81       	ldd	r22, Y+7	; 0x07
    380e:	78 85       	ldd	r23, Y+8	; 0x08
    3810:	89 85       	ldd	r24, Y+9	; 0x09
    3812:	9a 85       	ldd	r25, Y+10	; 0x0a
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	3f ef       	ldi	r19, 0xFF	; 255
    3818:	4f e7       	ldi	r20, 0x7F	; 127
    381a:	57 e4       	ldi	r21, 0x47	; 71
    381c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3820:	18 16       	cp	r1, r24
    3822:	4c f5       	brge	.+82     	; 0x3876 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3824:	6b 85       	ldd	r22, Y+11	; 0x0b
    3826:	7c 85       	ldd	r23, Y+12	; 0x0c
    3828:	8d 85       	ldd	r24, Y+13	; 0x0d
    382a:	9e 85       	ldd	r25, Y+14	; 0x0e
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	40 e2       	ldi	r20, 0x20	; 32
    3832:	51 e4       	ldi	r21, 0x41	; 65
    3834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	bc 01       	movw	r22, r24
    383e:	cd 01       	movw	r24, r26
    3840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
    384c:	0f c0       	rjmp	.+30     	; 0x386c <LCD_displayCharacter+0x39a>
    384e:	88 ec       	ldi	r24, 0xC8	; 200
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	9c 83       	std	Y+4, r25	; 0x04
    3854:	8b 83       	std	Y+3, r24	; 0x03
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	9c 81       	ldd	r25, Y+4	; 0x04
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	f1 f7       	brne	.-4      	; 0x385a <LCD_displayCharacter+0x388>
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3862:	8d 81       	ldd	r24, Y+5	; 0x05
    3864:	9e 81       	ldd	r25, Y+6	; 0x06
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	9e 83       	std	Y+6, r25	; 0x06
    386a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386c:	8d 81       	ldd	r24, Y+5	; 0x05
    386e:	9e 81       	ldd	r25, Y+6	; 0x06
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	69 f7       	brne	.-38     	; 0x384e <LCD_displayCharacter+0x37c>
    3874:	14 c0       	rjmp	.+40     	; 0x389e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3876:	6f 81       	ldd	r22, Y+7	; 0x07
    3878:	78 85       	ldd	r23, Y+8	; 0x08
    387a:	89 85       	ldd	r24, Y+9	; 0x09
    387c:	9a 85       	ldd	r25, Y+10	; 0x0a
    387e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	9e 83       	std	Y+6, r25	; 0x06
    3888:	8d 83       	std	Y+5, r24	; 0x05
    388a:	8d 81       	ldd	r24, Y+5	; 0x05
    388c:	9e 81       	ldd	r25, Y+6	; 0x06
    388e:	9a 83       	std	Y+2, r25	; 0x02
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	9a 81       	ldd	r25, Y+2	; 0x02
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <LCD_displayCharacter+0x3c4>
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    389e:	e9 96       	adiw	r28, 0x39	; 57
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	00 d0       	rcall	.+0      	; 0x38b6 <LCD_displayString+0x6>
    38b6:	0f 92       	push	r0
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	9b 83       	std	Y+3, r25	; 0x03
    38be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38c0:	19 82       	std	Y+1, r1	; 0x01
    38c2:	0e c0       	rjmp	.+28     	; 0x38e0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	9b 81       	ldd	r25, Y+3	; 0x03
    38ce:	fc 01       	movw	r30, r24
    38d0:	e2 0f       	add	r30, r18
    38d2:	f3 1f       	adc	r31, r19
    38d4:	80 81       	ld	r24, Z
    38d6:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_displayCharacter>
		i++;
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	8f 5f       	subi	r24, 0xFF	; 255
    38de:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	28 2f       	mov	r18, r24
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	8a 81       	ldd	r24, Y+2	; 0x02
    38e8:	9b 81       	ldd	r25, Y+3	; 0x03
    38ea:	fc 01       	movw	r30, r24
    38ec:	e2 0f       	add	r30, r18
    38ee:	f3 1f       	adc	r31, r19
    38f0:	80 81       	ld	r24, Z
    38f2:	88 23       	and	r24, r24
    38f4:	39 f7       	brne	.-50     	; 0x38c4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	00 d0       	rcall	.+0      	; 0x3908 <LCD_moveCursor+0x6>
    3908:	00 d0       	rcall	.+0      	; 0x390a <LCD_moveCursor+0x8>
    390a:	0f 92       	push	r0
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	8a 83       	std	Y+2, r24	; 0x02
    3912:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3914:	8a 81       	ldd	r24, Y+2	; 0x02
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	3d 83       	std	Y+5, r19	; 0x05
    391c:	2c 83       	std	Y+4, r18	; 0x04
    391e:	8c 81       	ldd	r24, Y+4	; 0x04
    3920:	9d 81       	ldd	r25, Y+5	; 0x05
    3922:	81 30       	cpi	r24, 0x01	; 1
    3924:	91 05       	cpc	r25, r1
    3926:	c1 f0       	breq	.+48     	; 0x3958 <LCD_moveCursor+0x56>
    3928:	2c 81       	ldd	r18, Y+4	; 0x04
    392a:	3d 81       	ldd	r19, Y+5	; 0x05
    392c:	22 30       	cpi	r18, 0x02	; 2
    392e:	31 05       	cpc	r19, r1
    3930:	2c f4       	brge	.+10     	; 0x393c <LCD_moveCursor+0x3a>
    3932:	8c 81       	ldd	r24, Y+4	; 0x04
    3934:	9d 81       	ldd	r25, Y+5	; 0x05
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	61 f0       	breq	.+24     	; 0x3952 <LCD_moveCursor+0x50>
    393a:	19 c0       	rjmp	.+50     	; 0x396e <LCD_moveCursor+0x6c>
    393c:	2c 81       	ldd	r18, Y+4	; 0x04
    393e:	3d 81       	ldd	r19, Y+5	; 0x05
    3940:	22 30       	cpi	r18, 0x02	; 2
    3942:	31 05       	cpc	r19, r1
    3944:	69 f0       	breq	.+26     	; 0x3960 <LCD_moveCursor+0x5e>
    3946:	8c 81       	ldd	r24, Y+4	; 0x04
    3948:	9d 81       	ldd	r25, Y+5	; 0x05
    394a:	83 30       	cpi	r24, 0x03	; 3
    394c:	91 05       	cpc	r25, r1
    394e:	61 f0       	breq	.+24     	; 0x3968 <LCD_moveCursor+0x66>
    3950:	0e c0       	rjmp	.+28     	; 0x396e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	0b c0       	rjmp	.+22     	; 0x396e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3958:	8b 81       	ldd	r24, Y+3	; 0x03
    395a:	80 5c       	subi	r24, 0xC0	; 192
    395c:	89 83       	std	Y+1, r24	; 0x01
    395e:	07 c0       	rjmp	.+14     	; 0x396e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3960:	8b 81       	ldd	r24, Y+3	; 0x03
    3962:	80 5f       	subi	r24, 0xF0	; 240
    3964:	89 83       	std	Y+1, r24	; 0x01
    3966:	03 c0       	rjmp	.+6      	; 0x396e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3968:	8b 81       	ldd	r24, Y+3	; 0x03
    396a:	80 5b       	subi	r24, 0xB0	; 176
    396c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	80 68       	ori	r24, 0x80	; 128
    3972:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <LCD_sendCommand>
}
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	00 d0       	rcall	.+0      	; 0x398c <LCD_displayStringRowColumn+0x6>
    398c:	00 d0       	rcall	.+0      	; 0x398e <LCD_displayStringRowColumn+0x8>
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	89 83       	std	Y+1, r24	; 0x01
    3994:	6a 83       	std	Y+2, r22	; 0x02
    3996:	5c 83       	std	Y+4, r21	; 0x04
    3998:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	6a 81       	ldd	r22, Y+2	; 0x02
    399e:	0e 94 81 1c 	call	0x3902	; 0x3902 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    39a2:	8b 81       	ldd	r24, Y+3	; 0x03
    39a4:	9c 81       	ldd	r25, Y+4	; 0x04
    39a6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <LCD_displayString>
}
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	0f 90       	pop	r0
    39b0:	0f 90       	pop	r0
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	08 95       	ret

000039b8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    39b8:	df 93       	push	r29
    39ba:	cf 93       	push	r28
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	62 97       	sbiw	r28, 0x12	; 18
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	9a 8b       	std	Y+18, r25	; 0x12
    39ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    39d0:	89 89       	ldd	r24, Y+17	; 0x11
    39d2:	9a 89       	ldd	r25, Y+18	; 0x12
    39d4:	9e 01       	movw	r18, r28
    39d6:	2f 5f       	subi	r18, 0xFF	; 255
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	b9 01       	movw	r22, r18
    39dc:	4a e0       	ldi	r20, 0x0A	; 10
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	0e 94 89 21 	call	0x4312	; 0x4312 <itoa>
   LCD_displayString(buff); /* Display the string */
    39e4:	ce 01       	movw	r24, r28
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <LCD_displayString>
}
    39ec:	62 96       	adiw	r28, 0x12	; 18
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	08 95       	ret

000039fe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <LCD_sendCommand>
}
    3a0c:	cf 91       	pop	r28
    3a0e:	df 91       	pop	r29
    3a10:	08 95       	ret

00003a12 <__vector_11>:
/* Global variables to hold the address of the call back function in the application */
static void (*Timer0_callBackPtr)(void) = NULL_PTR;
static void (*Timer1_callBackPtr)(void) = NULL_PTR;
static void (*Timer2_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect) {
    3a12:	1f 92       	push	r1
    3a14:	0f 92       	push	r0
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	0f 92       	push	r0
    3a1a:	11 24       	eor	r1, r1
    3a1c:	2f 93       	push	r18
    3a1e:	3f 93       	push	r19
    3a20:	4f 93       	push	r20
    3a22:	5f 93       	push	r21
    3a24:	6f 93       	push	r22
    3a26:	7f 93       	push	r23
    3a28:	8f 93       	push	r24
    3a2a:	9f 93       	push	r25
    3a2c:	af 93       	push	r26
    3a2e:	bf 93       	push	r27
    3a30:	ef 93       	push	r30
    3a32:	ff 93       	push	r31
    3a34:	df 93       	push	r29
    3a36:	cf 93       	push	r28
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_callBackPtr != NULL_PTR) {
    3a3c:	80 91 66 01 	lds	r24, 0x0166
    3a40:	90 91 67 01 	lds	r25, 0x0167
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	29 f0       	breq	.+10     	; 0x3a52 <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3a48:	e0 91 66 01 	lds	r30, 0x0166
    3a4c:	f0 91 67 01 	lds	r31, 0x0167
    3a50:	09 95       	icall
	}
}
    3a52:	cf 91       	pop	r28
    3a54:	df 91       	pop	r29
    3a56:	ff 91       	pop	r31
    3a58:	ef 91       	pop	r30
    3a5a:	bf 91       	pop	r27
    3a5c:	af 91       	pop	r26
    3a5e:	9f 91       	pop	r25
    3a60:	8f 91       	pop	r24
    3a62:	7f 91       	pop	r23
    3a64:	6f 91       	pop	r22
    3a66:	5f 91       	pop	r21
    3a68:	4f 91       	pop	r20
    3a6a:	3f 91       	pop	r19
    3a6c:	2f 91       	pop	r18
    3a6e:	0f 90       	pop	r0
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	0f 90       	pop	r0
    3a74:	1f 90       	pop	r1
    3a76:	18 95       	reti

00003a78 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    3a78:	1f 92       	push	r1
    3a7a:	0f 92       	push	r0
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	0f 92       	push	r0
    3a80:	11 24       	eor	r1, r1
    3a82:	2f 93       	push	r18
    3a84:	3f 93       	push	r19
    3a86:	4f 93       	push	r20
    3a88:	5f 93       	push	r21
    3a8a:	6f 93       	push	r22
    3a8c:	7f 93       	push	r23
    3a8e:	8f 93       	push	r24
    3a90:	9f 93       	push	r25
    3a92:	af 93       	push	r26
    3a94:	bf 93       	push	r27
    3a96:	ef 93       	push	r30
    3a98:	ff 93       	push	r31
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_callBackPtr != NULL_PTR) {
    3aa2:	80 91 66 01 	lds	r24, 0x0166
    3aa6:	90 91 67 01 	lds	r25, 0x0167
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	29 f0       	breq	.+10     	; 0x3ab8 <__vector_10+0x40>
		(*Timer0_callBackPtr)();
    3aae:	e0 91 66 01 	lds	r30, 0x0166
    3ab2:	f0 91 67 01 	lds	r31, 0x0167
    3ab6:	09 95       	icall
	}
}
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	ff 91       	pop	r31
    3abe:	ef 91       	pop	r30
    3ac0:	bf 91       	pop	r27
    3ac2:	af 91       	pop	r26
    3ac4:	9f 91       	pop	r25
    3ac6:	8f 91       	pop	r24
    3ac8:	7f 91       	pop	r23
    3aca:	6f 91       	pop	r22
    3acc:	5f 91       	pop	r21
    3ace:	4f 91       	pop	r20
    3ad0:	3f 91       	pop	r19
    3ad2:	2f 91       	pop	r18
    3ad4:	0f 90       	pop	r0
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	0f 90       	pop	r0
    3ada:	1f 90       	pop	r1
    3adc:	18 95       	reti

00003ade <__vector_5>:

ISR(TIMER2_OVF_vect) {
    3ade:	1f 92       	push	r1
    3ae0:	0f 92       	push	r0
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	0f 92       	push	r0
    3ae6:	11 24       	eor	r1, r1
    3ae8:	2f 93       	push	r18
    3aea:	3f 93       	push	r19
    3aec:	4f 93       	push	r20
    3aee:	5f 93       	push	r21
    3af0:	6f 93       	push	r22
    3af2:	7f 93       	push	r23
    3af4:	8f 93       	push	r24
    3af6:	9f 93       	push	r25
    3af8:	af 93       	push	r26
    3afa:	bf 93       	push	r27
    3afc:	ef 93       	push	r30
    3afe:	ff 93       	push	r31
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
	if (Timer2_callBackPtr != NULL_PTR) {
    3b08:	80 91 6a 01 	lds	r24, 0x016A
    3b0c:	90 91 6b 01 	lds	r25, 0x016B
    3b10:	00 97       	sbiw	r24, 0x00	; 0
    3b12:	29 f0       	breq	.+10     	; 0x3b1e <__vector_5+0x40>
		(*Timer2_callBackPtr)();
    3b14:	e0 91 6a 01 	lds	r30, 0x016A
    3b18:	f0 91 6b 01 	lds	r31, 0x016B
    3b1c:	09 95       	icall
	}
}
    3b1e:	cf 91       	pop	r28
    3b20:	df 91       	pop	r29
    3b22:	ff 91       	pop	r31
    3b24:	ef 91       	pop	r30
    3b26:	bf 91       	pop	r27
    3b28:	af 91       	pop	r26
    3b2a:	9f 91       	pop	r25
    3b2c:	8f 91       	pop	r24
    3b2e:	7f 91       	pop	r23
    3b30:	6f 91       	pop	r22
    3b32:	5f 91       	pop	r21
    3b34:	4f 91       	pop	r20
    3b36:	3f 91       	pop	r19
    3b38:	2f 91       	pop	r18
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	0f 90       	pop	r0
    3b40:	1f 90       	pop	r1
    3b42:	18 95       	reti

00003b44 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    3b44:	1f 92       	push	r1
    3b46:	0f 92       	push	r0
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	0f 92       	push	r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	2f 93       	push	r18
    3b50:	3f 93       	push	r19
    3b52:	4f 93       	push	r20
    3b54:	5f 93       	push	r21
    3b56:	6f 93       	push	r22
    3b58:	7f 93       	push	r23
    3b5a:	8f 93       	push	r24
    3b5c:	9f 93       	push	r25
    3b5e:	af 93       	push	r26
    3b60:	bf 93       	push	r27
    3b62:	ef 93       	push	r30
    3b64:	ff 93       	push	r31
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
	if (Timer2_callBackPtr != NULL_PTR) {
    3b6e:	80 91 6a 01 	lds	r24, 0x016A
    3b72:	90 91 6b 01 	lds	r25, 0x016B
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	29 f0       	breq	.+10     	; 0x3b84 <__vector_4+0x40>
		(*Timer2_callBackPtr)();
    3b7a:	e0 91 6a 01 	lds	r30, 0x016A
    3b7e:	f0 91 6b 01 	lds	r31, 0x016B
    3b82:	09 95       	icall
	}
}
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	ff 91       	pop	r31
    3b8a:	ef 91       	pop	r30
    3b8c:	bf 91       	pop	r27
    3b8e:	af 91       	pop	r26
    3b90:	9f 91       	pop	r25
    3b92:	8f 91       	pop	r24
    3b94:	7f 91       	pop	r23
    3b96:	6f 91       	pop	r22
    3b98:	5f 91       	pop	r21
    3b9a:	4f 91       	pop	r20
    3b9c:	3f 91       	pop	r19
    3b9e:	2f 91       	pop	r18
    3ba0:	0f 90       	pop	r0
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	0f 90       	pop	r0
    3ba6:	1f 90       	pop	r1
    3ba8:	18 95       	reti

00003baa <__vector_9>:

ISR(TIMER1_OVF_vect) {
    3baa:	1f 92       	push	r1
    3bac:	0f 92       	push	r0
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	0f 92       	push	r0
    3bb2:	11 24       	eor	r1, r1
    3bb4:	2f 93       	push	r18
    3bb6:	3f 93       	push	r19
    3bb8:	4f 93       	push	r20
    3bba:	5f 93       	push	r21
    3bbc:	6f 93       	push	r22
    3bbe:	7f 93       	push	r23
    3bc0:	8f 93       	push	r24
    3bc2:	9f 93       	push	r25
    3bc4:	af 93       	push	r26
    3bc6:	bf 93       	push	r27
    3bc8:	ef 93       	push	r30
    3bca:	ff 93       	push	r31
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_callBackPtr != NULL_PTR) {
    3bd4:	80 91 68 01 	lds	r24, 0x0168
    3bd8:	90 91 69 01 	lds	r25, 0x0169
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	29 f0       	breq	.+10     	; 0x3bea <__vector_9+0x40>
		(*Timer1_callBackPtr)();
    3be0:	e0 91 68 01 	lds	r30, 0x0168
    3be4:	f0 91 69 01 	lds	r31, 0x0169
    3be8:	09 95       	icall
	}
}
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	ff 91       	pop	r31
    3bf0:	ef 91       	pop	r30
    3bf2:	bf 91       	pop	r27
    3bf4:	af 91       	pop	r26
    3bf6:	9f 91       	pop	r25
    3bf8:	8f 91       	pop	r24
    3bfa:	7f 91       	pop	r23
    3bfc:	6f 91       	pop	r22
    3bfe:	5f 91       	pop	r21
    3c00:	4f 91       	pop	r20
    3c02:	3f 91       	pop	r19
    3c04:	2f 91       	pop	r18
    3c06:	0f 90       	pop	r0
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	0f 90       	pop	r0
    3c0c:	1f 90       	pop	r1
    3c0e:	18 95       	reti

00003c10 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    3c10:	1f 92       	push	r1
    3c12:	0f 92       	push	r0
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	0f 92       	push	r0
    3c18:	11 24       	eor	r1, r1
    3c1a:	2f 93       	push	r18
    3c1c:	3f 93       	push	r19
    3c1e:	4f 93       	push	r20
    3c20:	5f 93       	push	r21
    3c22:	6f 93       	push	r22
    3c24:	7f 93       	push	r23
    3c26:	8f 93       	push	r24
    3c28:	9f 93       	push	r25
    3c2a:	af 93       	push	r26
    3c2c:	bf 93       	push	r27
    3c2e:	ef 93       	push	r30
    3c30:	ff 93       	push	r31
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_callBackPtr != NULL_PTR) {
    3c3a:	80 91 68 01 	lds	r24, 0x0168
    3c3e:	90 91 69 01 	lds	r25, 0x0169
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	29 f0       	breq	.+10     	; 0x3c50 <__vector_7+0x40>
		(*Timer1_callBackPtr)();
    3c46:	e0 91 68 01 	lds	r30, 0x0168
    3c4a:	f0 91 69 01 	lds	r31, 0x0169
    3c4e:	09 95       	icall
	}
}
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	ff 91       	pop	r31
    3c56:	ef 91       	pop	r30
    3c58:	bf 91       	pop	r27
    3c5a:	af 91       	pop	r26
    3c5c:	9f 91       	pop	r25
    3c5e:	8f 91       	pop	r24
    3c60:	7f 91       	pop	r23
    3c62:	6f 91       	pop	r22
    3c64:	5f 91       	pop	r21
    3c66:	4f 91       	pop	r20
    3c68:	3f 91       	pop	r19
    3c6a:	2f 91       	pop	r18
    3c6c:	0f 90       	pop	r0
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	0f 90       	pop	r0
    3c72:	1f 90       	pop	r1
    3c74:	18 95       	reti

00003c76 <Timer_init>:

//Function to initialize the Timer driver

void Timer_init(const Timer_ConfigType *Config_Ptr) {
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	60 97       	sbiw	r28, 0x10	; 16
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    3c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c90:	fa 81       	ldd	r31, Y+2	; 0x02
    3c92:	84 81       	ldd	r24, Z+4	; 0x04
    3c94:	28 2f       	mov	r18, r24
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	38 8b       	std	Y+16, r19	; 0x10
    3c9a:	2f 87       	std	Y+15, r18	; 0x0f
    3c9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c9e:	98 89       	ldd	r25, Y+16	; 0x10
    3ca0:	81 30       	cpi	r24, 0x01	; 1
    3ca2:	91 05       	cpc	r25, r1
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <Timer_init+0x32>
    3ca6:	68 c0       	rjmp	.+208    	; 0x3d78 <Timer_init+0x102>
    3ca8:	2f 85       	ldd	r18, Y+15	; 0x0f
    3caa:	38 89       	ldd	r19, Y+16	; 0x10
    3cac:	22 30       	cpi	r18, 0x02	; 2
    3cae:	31 05       	cpc	r19, r1
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <Timer_init+0x3e>
    3cb2:	cc c0       	rjmp	.+408    	; 0x3e4c <Timer_init+0x1d6>
    3cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb6:	98 89       	ldd	r25, Y+16	; 0x10
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	09 f0       	breq	.+2      	; 0x3cbe <Timer_init+0x48>
    3cbc:	23 c1       	rjmp	.+582    	; 0x3f04 <Timer_init+0x28e>
	case 0:
		//clear all the register to be ready for configuration
		//Set pin FOC0 as we will not use pwm mode
		TCCR0 = (1 << FOC0);
    3cbe:	e3 e5       	ldi	r30, 0x53	; 83
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 e8       	ldi	r24, 0x80	; 128
    3cc4:	80 83       	st	Z, r24
		//Choose the mode
		switch (Config_Ptr->timer_mode) {
    3cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cca:	86 81       	ldd	r24, Z+6	; 0x06
    3ccc:	28 2f       	mov	r18, r24
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	3e 87       	std	Y+14, r19	; 0x0e
    3cd2:	2d 87       	std	Y+13, r18	; 0x0d
    3cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	61 f0       	breq	.+24     	; 0x3cf4 <Timer_init+0x7e>
    3cdc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3cde:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ce0:	21 30       	cpi	r18, 0x01	; 1
    3ce2:	31 05       	cpc	r19, r1
    3ce4:	39 f4       	brne	.+14     	; 0x3cf4 <Timer_init+0x7e>
		case 0:
			break;
		case 1:
			TCCR0 |= (1 << WGM01);
    3ce6:	a3 e5       	ldi	r26, 0x53	; 83
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e3 e5       	ldi	r30, 0x53	; 83
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	80 81       	ld	r24, Z
    3cf0:	88 60       	ori	r24, 0x08	; 8
    3cf2:	8c 93       	st	X, r24
			break;
		}
		//Set the clock
		TCCR0 = (TCCR0 & 0xF8) | Config_Ptr->timer_clock;
    3cf4:	a3 e5       	ldi	r26, 0x53	; 83
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e3 e5       	ldi	r30, 0x53	; 83
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	98 2f       	mov	r25, r24
    3d00:	98 7f       	andi	r25, 0xF8	; 248
    3d02:	e9 81       	ldd	r30, Y+1	; 0x01
    3d04:	fa 81       	ldd	r31, Y+2	; 0x02
    3d06:	85 81       	ldd	r24, Z+5	; 0x05
    3d08:	89 2b       	or	r24, r25
    3d0a:	8c 93       	st	X, r24
		//Set initial counter
		TCNT0 = (Config_Ptr->timer_InitialValue & 0x00FF);
    3d0c:	a2 e5       	ldi	r26, 0x52	; 82
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e9 81       	ldd	r30, Y+1	; 0x01
    3d12:	fa 81       	ldd	r31, Y+2	; 0x02
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	8c 93       	st	X, r24
		//Set Compare register
		OCR0 = (Config_Ptr->timer_compare_MatchValue & 0x00FF);
    3d1a:	ac e5       	ldi	r26, 0x5C	; 92
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d20:	fa 81       	ldd	r31, Y+2	; 0x02
    3d22:	82 81       	ldd	r24, Z+2	; 0x02
    3d24:	93 81       	ldd	r25, Z+3	; 0x03
    3d26:	8c 93       	st	X, r24
		//Enable interrupt
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    3d28:	a9 e5       	ldi	r26, 0x59	; 89
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	e9 e5       	ldi	r30, 0x59	; 89
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	8c 7f       	andi	r24, 0xFC	; 252
    3d34:	8c 93       	st	X, r24
		switch (Config_Ptr->timer_mode) {
    3d36:	e9 81       	ldd	r30, Y+1	; 0x01
    3d38:	fa 81       	ldd	r31, Y+2	; 0x02
    3d3a:	86 81       	ldd	r24, Z+6	; 0x06
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	3c 87       	std	Y+12, r19	; 0x0c
    3d42:	2b 87       	std	Y+11, r18	; 0x0b
    3d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	31 f0       	breq	.+12     	; 0x3d58 <Timer_init+0xe2>
    3d4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d50:	21 30       	cpi	r18, 0x01	; 1
    3d52:	31 05       	cpc	r19, r1
    3d54:	49 f0       	breq	.+18     	; 0x3d68 <Timer_init+0xf2>
    3d56:	d6 c0       	rjmp	.+428    	; 0x3f04 <Timer_init+0x28e>
		case 0:
			TIMSK |= (1 << TOIE0);
    3d58:	a9 e5       	ldi	r26, 0x59	; 89
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	e9 e5       	ldi	r30, 0x59	; 89
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	80 81       	ld	r24, Z
    3d62:	81 60       	ori	r24, 0x01	; 1
    3d64:	8c 93       	st	X, r24
    3d66:	ce c0       	rjmp	.+412    	; 0x3f04 <Timer_init+0x28e>
			break;
		case 1:
			TIMSK |= (1 << OCIE0);
    3d68:	a9 e5       	ldi	r26, 0x59	; 89
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	e9 e5       	ldi	r30, 0x59	; 89
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	80 81       	ld	r24, Z
    3d72:	82 60       	ori	r24, 0x02	; 2
    3d74:	8c 93       	st	X, r24
    3d76:	c6 c0       	rjmp	.+396    	; 0x3f04 <Timer_init+0x28e>
		break;

	case 1:
		//clear all the register to be ready for configuration
		//Set pin FOC1A & FOC1B as we will not use pwm mode
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    3d78:	ef e4       	ldi	r30, 0x4F	; 79
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	8c e0       	ldi	r24, 0x0C	; 12
    3d7e:	80 83       	st	Z, r24
		//Choose the mode
		switch (Config_Ptr->timer_mode) {
    3d80:	e9 81       	ldd	r30, Y+1	; 0x01
    3d82:	fa 81       	ldd	r31, Y+2	; 0x02
    3d84:	86 81       	ldd	r24, Z+6	; 0x06
    3d86:	28 2f       	mov	r18, r24
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	3a 87       	std	Y+10, r19	; 0x0a
    3d8c:	29 87       	std	Y+9, r18	; 0x09
    3d8e:	89 85       	ldd	r24, Y+9	; 0x09
    3d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	31 f0       	breq	.+12     	; 0x3da2 <Timer_init+0x12c>
    3d96:	29 85       	ldd	r18, Y+9	; 0x09
    3d98:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d9a:	21 30       	cpi	r18, 0x01	; 1
    3d9c:	31 05       	cpc	r19, r1
    3d9e:	49 f0       	breq	.+18     	; 0x3db2 <Timer_init+0x13c>
    3da0:	0f c0       	rjmp	.+30     	; 0x3dc0 <Timer_init+0x14a>
		case 0:
			TCCR1B &= ~(1 << WGM12);
    3da2:	ae e4       	ldi	r26, 0x4E	; 78
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	ee e4       	ldi	r30, 0x4E	; 78
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	80 81       	ld	r24, Z
    3dac:	87 7f       	andi	r24, 0xF7	; 247
    3dae:	8c 93       	st	X, r24
    3db0:	07 c0       	rjmp	.+14     	; 0x3dc0 <Timer_init+0x14a>
			break;
		case 1:
			TCCR1B |= (1 << WGM12);
    3db2:	ae e4       	ldi	r26, 0x4E	; 78
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	ee e4       	ldi	r30, 0x4E	; 78
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 81       	ld	r24, Z
    3dbc:	88 60       	ori	r24, 0x08	; 8
    3dbe:	8c 93       	st	X, r24
			break;
		}
		//Set the clock
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr->timer_clock;
    3dc0:	ae e4       	ldi	r26, 0x4E	; 78
    3dc2:	b0 e0       	ldi	r27, 0x00	; 0
    3dc4:	ee e4       	ldi	r30, 0x4E	; 78
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	80 81       	ld	r24, Z
    3dca:	98 2f       	mov	r25, r24
    3dcc:	98 7f       	andi	r25, 0xF8	; 248
    3dce:	e9 81       	ldd	r30, Y+1	; 0x01
    3dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    3dd2:	85 81       	ldd	r24, Z+5	; 0x05
    3dd4:	89 2b       	or	r24, r25
    3dd6:	8c 93       	st	X, r24
		//Set initial counter
		TCNT1 = Config_Ptr->timer_InitialValue;
    3dd8:	ac e4       	ldi	r26, 0x4C	; 76
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dde:	fa 81       	ldd	r31, Y+2	; 0x02
    3de0:	80 81       	ld	r24, Z
    3de2:	91 81       	ldd	r25, Z+1	; 0x01
    3de4:	11 96       	adiw	r26, 0x01	; 1
    3de6:	9c 93       	st	X, r25
    3de8:	8e 93       	st	-X, r24
		//Set Compare register
		OCR1A = Config_Ptr->timer_compare_MatchValue;
    3dea:	aa e4       	ldi	r26, 0x4A	; 74
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	e9 81       	ldd	r30, Y+1	; 0x01
    3df0:	fa 81       	ldd	r31, Y+2	; 0x02
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	11 96       	adiw	r26, 0x01	; 1
    3df8:	9c 93       	st	X, r25
    3dfa:	8e 93       	st	-X, r24
		//Enable interrupt
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    3dfc:	a9 e5       	ldi	r26, 0x59	; 89
    3dfe:	b0 e0       	ldi	r27, 0x00	; 0
    3e00:	e9 e5       	ldi	r30, 0x59	; 89
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	8b 7e       	andi	r24, 0xEB	; 235
    3e08:	8c 93       	st	X, r24
		switch (Config_Ptr->timer_mode) {
    3e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e0e:	86 81       	ldd	r24, Z+6	; 0x06
    3e10:	28 2f       	mov	r18, r24
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	38 87       	std	Y+8, r19	; 0x08
    3e16:	2f 83       	std	Y+7, r18	; 0x07
    3e18:	8f 81       	ldd	r24, Y+7	; 0x07
    3e1a:	98 85       	ldd	r25, Y+8	; 0x08
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	31 f0       	breq	.+12     	; 0x3e2c <Timer_init+0x1b6>
    3e20:	2f 81       	ldd	r18, Y+7	; 0x07
    3e22:	38 85       	ldd	r19, Y+8	; 0x08
    3e24:	21 30       	cpi	r18, 0x01	; 1
    3e26:	31 05       	cpc	r19, r1
    3e28:	49 f0       	breq	.+18     	; 0x3e3c <Timer_init+0x1c6>
    3e2a:	6c c0       	rjmp	.+216    	; 0x3f04 <Timer_init+0x28e>
		case 0:
			TIMSK |= (1 << TOIE1);
    3e2c:	a9 e5       	ldi	r26, 0x59	; 89
    3e2e:	b0 e0       	ldi	r27, 0x00	; 0
    3e30:	e9 e5       	ldi	r30, 0x59	; 89
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	84 60       	ori	r24, 0x04	; 4
    3e38:	8c 93       	st	X, r24
    3e3a:	64 c0       	rjmp	.+200    	; 0x3f04 <Timer_init+0x28e>
			break;
		case 1:
			TIMSK |= (1 << OCIE1A);
    3e3c:	a9 e5       	ldi	r26, 0x59	; 89
    3e3e:	b0 e0       	ldi	r27, 0x00	; 0
    3e40:	e9 e5       	ldi	r30, 0x59	; 89
    3e42:	f0 e0       	ldi	r31, 0x00	; 0
    3e44:	80 81       	ld	r24, Z
    3e46:	80 61       	ori	r24, 0x10	; 16
    3e48:	8c 93       	st	X, r24
    3e4a:	5c c0       	rjmp	.+184    	; 0x3f04 <Timer_init+0x28e>
		break;

	case 2:
		//clear all the register to be ready for configuration
		//Set pin FOC2 as we will not use pwm mode
		TCCR2 = (1 << FOC2);
    3e4c:	e5 e4       	ldi	r30, 0x45	; 69
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 e8       	ldi	r24, 0x80	; 128
    3e52:	80 83       	st	Z, r24
		//Choose the mode
		switch (Config_Ptr->timer_mode) {
    3e54:	e9 81       	ldd	r30, Y+1	; 0x01
    3e56:	fa 81       	ldd	r31, Y+2	; 0x02
    3e58:	86 81       	ldd	r24, Z+6	; 0x06
    3e5a:	28 2f       	mov	r18, r24
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	3e 83       	std	Y+6, r19	; 0x06
    3e60:	2d 83       	std	Y+5, r18	; 0x05
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	00 97       	sbiw	r24, 0x00	; 0
    3e68:	61 f0       	breq	.+24     	; 0x3e82 <Timer_init+0x20c>
    3e6a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e6c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e6e:	21 30       	cpi	r18, 0x01	; 1
    3e70:	31 05       	cpc	r19, r1
    3e72:	39 f4       	brne	.+14     	; 0x3e82 <Timer_init+0x20c>
		case 0:
			break;
		case 1:
			TCCR2 |= (1 << WGM21);
    3e74:	a5 e4       	ldi	r26, 0x45	; 69
    3e76:	b0 e0       	ldi	r27, 0x00	; 0
    3e78:	e5 e4       	ldi	r30, 0x45	; 69
    3e7a:	f0 e0       	ldi	r31, 0x00	; 0
    3e7c:	80 81       	ld	r24, Z
    3e7e:	88 60       	ori	r24, 0x08	; 8
    3e80:	8c 93       	st	X, r24
			break;
		}
		//Set the clock
		TCCR2 = (TCCR2 & 0xF8) | Config_Ptr->timer_clock;
    3e82:	a5 e4       	ldi	r26, 0x45	; 69
    3e84:	b0 e0       	ldi	r27, 0x00	; 0
    3e86:	e5 e4       	ldi	r30, 0x45	; 69
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	80 81       	ld	r24, Z
    3e8c:	98 2f       	mov	r25, r24
    3e8e:	98 7f       	andi	r25, 0xF8	; 248
    3e90:	e9 81       	ldd	r30, Y+1	; 0x01
    3e92:	fa 81       	ldd	r31, Y+2	; 0x02
    3e94:	85 81       	ldd	r24, Z+5	; 0x05
    3e96:	89 2b       	or	r24, r25
    3e98:	8c 93       	st	X, r24
		//Set initial counter
		TCNT2 = (Config_Ptr->timer_InitialValue & 0x00FF);
    3e9a:	a4 e4       	ldi	r26, 0x44	; 68
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	8c 93       	st	X, r24
		//Set Compare register
		OCR2 = (Config_Ptr->timer_compare_MatchValue & 0x00FF);
    3ea8:	a3 e4       	ldi	r26, 0x43	; 67
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	e9 81       	ldd	r30, Y+1	; 0x01
    3eae:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	8c 93       	st	X, r24
		//Enable interrupt
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    3eb6:	a9 e5       	ldi	r26, 0x59	; 89
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	e9 e5       	ldi	r30, 0x59	; 89
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	8f 73       	andi	r24, 0x3F	; 63
    3ec2:	8c 93       	st	X, r24
		switch (Config_Ptr->timer_mode) {
    3ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec8:	86 81       	ldd	r24, Z+6	; 0x06
    3eca:	28 2f       	mov	r18, r24
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	3c 83       	std	Y+4, r19	; 0x04
    3ed0:	2b 83       	std	Y+3, r18	; 0x03
    3ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	31 f0       	breq	.+12     	; 0x3ee6 <Timer_init+0x270>
    3eda:	2b 81       	ldd	r18, Y+3	; 0x03
    3edc:	3c 81       	ldd	r19, Y+4	; 0x04
    3ede:	21 30       	cpi	r18, 0x01	; 1
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	49 f0       	breq	.+18     	; 0x3ef6 <Timer_init+0x280>
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <Timer_init+0x28e>
		case 0:
			TIMSK |= (1 << TOIE2);
    3ee6:	a9 e5       	ldi	r26, 0x59	; 89
    3ee8:	b0 e0       	ldi	r27, 0x00	; 0
    3eea:	e9 e5       	ldi	r30, 0x59	; 89
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	80 81       	ld	r24, Z
    3ef0:	80 64       	ori	r24, 0x40	; 64
    3ef2:	8c 93       	st	X, r24
    3ef4:	07 c0       	rjmp	.+14     	; 0x3f04 <Timer_init+0x28e>
			break;
		case 1:
			TIMSK |= (1 << OCIE2);
    3ef6:	a9 e5       	ldi	r26, 0x59	; 89
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	e9 e5       	ldi	r30, 0x59	; 89
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	80 68       	ori	r24, 0x80	; 128
    3f02:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    3f04:	60 96       	adiw	r28, 0x10	; 16
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	08 95       	ret

00003f16 <Timer_deInit>:

//Function to disable the Timer via Timer_ID.

void Timer_deInit(Timer_ID_Type timer_type) {
    3f16:	df 93       	push	r29
    3f18:	cf 93       	push	r28
    3f1a:	00 d0       	rcall	.+0      	; 0x3f1c <Timer_deInit+0x6>
    3f1c:	0f 92       	push	r0
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	28 2f       	mov	r18, r24
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	3b 83       	std	Y+3, r19	; 0x03
    3f2c:	2a 83       	std	Y+2, r18	; 0x02
    3f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f30:	9b 81       	ldd	r25, Y+3	; 0x03
    3f32:	81 30       	cpi	r24, 0x01	; 1
    3f34:	91 05       	cpc	r25, r1
    3f36:	89 f0       	breq	.+34     	; 0x3f5a <Timer_deInit+0x44>
    3f38:	2a 81       	ldd	r18, Y+2	; 0x02
    3f3a:	3b 81       	ldd	r19, Y+3	; 0x03
    3f3c:	22 30       	cpi	r18, 0x02	; 2
    3f3e:	31 05       	cpc	r19, r1
    3f40:	a1 f0       	breq	.+40     	; 0x3f6a <Timer_deInit+0x54>
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	9b 81       	ldd	r25, Y+3	; 0x03
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	b9 f4       	brne	.+46     	; 0x3f78 <Timer_deInit+0x62>
	case 0:
		TCCR0 = (TCCR2 & 0xF8) | NO_CLOCK;
    3f4a:	a3 e5       	ldi	r26, 0x53	; 83
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	e5 e4       	ldi	r30, 0x45	; 69
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	88 7f       	andi	r24, 0xF8	; 248
    3f56:	8c 93       	st	X, r24
    3f58:	0f c0       	rjmp	.+30     	; 0x3f78 <Timer_deInit+0x62>
		break;
	case 1:
		TCCR1B = (TCCR1B & 0xF8) | NO_CLOCK;
    3f5a:	ae e4       	ldi	r26, 0x4E	; 78
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	ee e4       	ldi	r30, 0x4E	; 78
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	88 7f       	andi	r24, 0xF8	; 248
    3f66:	8c 93       	st	X, r24
    3f68:	07 c0       	rjmp	.+14     	; 0x3f78 <Timer_deInit+0x62>
		break;
	case 2:
		TCCR2 = (TCCR2 & 0xF8) | NO_CLOCK;
    3f6a:	a5 e4       	ldi	r26, 0x45	; 69
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e5 e4       	ldi	r30, 0x45	; 69
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	88 7f       	andi	r24, 0xF8	; 248
    3f76:	8c 93       	st	X, r24
		break;
	}
}
    3f78:	0f 90       	pop	r0
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	cf 91       	pop	r28
    3f80:	df 91       	pop	r29
    3f82:	08 95       	ret

00003f84 <Timer_setCallBack>:

//Function to set the Call Back function address to the required Timer.

void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    3f84:	df 93       	push	r29
    3f86:	cf 93       	push	r28
    3f88:	00 d0       	rcall	.+0      	; 0x3f8a <Timer_setCallBack+0x6>
    3f8a:	00 d0       	rcall	.+0      	; 0x3f8c <Timer_setCallBack+0x8>
    3f8c:	0f 92       	push	r0
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	9a 83       	std	Y+2, r25	; 0x02
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	6b 83       	std	Y+3, r22	; 0x03
	switch (a_timer_ID) {
    3f98:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9a:	28 2f       	mov	r18, r24
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	3d 83       	std	Y+5, r19	; 0x05
    3fa0:	2c 83       	std	Y+4, r18	; 0x04
    3fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    3fa6:	81 30       	cpi	r24, 0x01	; 1
    3fa8:	91 05       	cpc	r25, r1
    3faa:	81 f0       	breq	.+32     	; 0x3fcc <Timer_setCallBack+0x48>
    3fac:	2c 81       	ldd	r18, Y+4	; 0x04
    3fae:	3d 81       	ldd	r19, Y+5	; 0x05
    3fb0:	22 30       	cpi	r18, 0x02	; 2
    3fb2:	31 05       	cpc	r19, r1
    3fb4:	91 f0       	breq	.+36     	; 0x3fda <Timer_setCallBack+0x56>
    3fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	a1 f4       	brne	.+40     	; 0x3fe6 <Timer_setCallBack+0x62>
	case 0:
		Timer0_callBackPtr = a_ptr;
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	90 93 67 01 	sts	0x0167, r25
    3fc6:	80 93 66 01 	sts	0x0166, r24
    3fca:	0d c0       	rjmp	.+26     	; 0x3fe6 <Timer_setCallBack+0x62>
		break;
	case 1:
		Timer1_callBackPtr = a_ptr;
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
    3fce:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd0:	90 93 69 01 	sts	0x0169, r25
    3fd4:	80 93 68 01 	sts	0x0168, r24
    3fd8:	06 c0       	rjmp	.+12     	; 0x3fe6 <Timer_setCallBack+0x62>
		break;
	case 2:
		Timer2_callBackPtr = a_ptr;
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fde:	90 93 6b 01 	sts	0x016B, r25
    3fe2:	80 93 6a 01 	sts	0x016A, r24
		break;
	}
}
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. calculate baud rate.
 * 3. Enable transmitting and receiving
 */

void UART_init(const UART_ConfigType *Config_Ptr) {
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <UART_init+0x6>
    3ffc:	00 d0       	rcall	.+0      	; 0x3ffe <UART_init+0x8>
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	9c 83       	std	Y+4, r25	; 0x04
    4004:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    4006:	1a 82       	std	Y+2, r1	; 0x02
    4008:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    400a:	eb e2       	ldi	r30, 0x2B	; 43
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	80 83       	st	Z, r24
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8  = 0 For 8-bit data mode
	 * TXB8  = 0 For 8-bit data mode
	 */

	UCSRB = (1 << RXEN) | (1 << TXEN);
    4012:	ea e2       	ldi	r30, 0x2A	; 42
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	88 e1       	ldi	r24, 0x18	; 24
    4018:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 (Used with the Synchronous operation only)
	 */

	UCSRC = (1 << URSEL) | /*(UCSRC & 0xC1) |*/((Config_Ptr->parity) << 4)
    401a:	a0 e4       	ldi	r26, 0x40	; 64
    401c:	b0 e0       	ldi	r27, 0x00	; 0
    401e:	eb 81       	ldd	r30, Y+3	; 0x03
    4020:	fc 81       	ldd	r31, Y+4	; 0x04
    4022:	81 81       	ldd	r24, Z+1	; 0x01
    4024:	88 2f       	mov	r24, r24
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	82 95       	swap	r24
    402a:	92 95       	swap	r25
    402c:	90 7f       	andi	r25, 0xF0	; 240
    402e:	98 27       	eor	r25, r24
    4030:	80 7f       	andi	r24, 0xF0	; 240
    4032:	98 27       	eor	r25, r24
    4034:	28 2f       	mov	r18, r24
    4036:	20 68       	ori	r18, 0x80	; 128
    4038:	eb 81       	ldd	r30, Y+3	; 0x03
    403a:	fc 81       	ldd	r31, Y+4	; 0x04
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	88 2f       	mov	r24, r24
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	88 0f       	add	r24, r24
    4048:	99 1f       	adc	r25, r25
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	28 2b       	or	r18, r24
    4050:	eb 81       	ldd	r30, Y+3	; 0x03
    4052:	fc 81       	ldd	r31, Y+4	; 0x04
    4054:	80 81       	ld	r24, Z
    4056:	88 2f       	mov	r24, r24
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	82 2b       	or	r24, r18
    4060:	8c 93       	st	X, r24
			| ((Config_Ptr->stop_bit) << 3) | ((Config_Ptr->bit_data) << 1);

	/* Calculate the UBRR register value from given baud rate*/
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    4062:	eb 81       	ldd	r30, Y+3	; 0x03
    4064:	fc 81       	ldd	r31, Y+4	; 0x04
    4066:	83 81       	ldd	r24, Z+3	; 0x03
    4068:	94 81       	ldd	r25, Z+4	; 0x04
    406a:	a5 81       	ldd	r26, Z+5	; 0x05
    406c:	b6 81       	ldd	r27, Z+6	; 0x06
    406e:	88 0f       	add	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	aa 1f       	adc	r26, r26
    4074:	bb 1f       	adc	r27, r27
    4076:	88 0f       	add	r24, r24
    4078:	99 1f       	adc	r25, r25
    407a:	aa 1f       	adc	r26, r26
    407c:	bb 1f       	adc	r27, r27
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	aa 1f       	adc	r26, r26
    4084:	bb 1f       	adc	r27, r27
    4086:	9c 01       	movw	r18, r24
    4088:	ad 01       	movw	r20, r26
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	92 e1       	ldi	r25, 0x12	; 18
    408e:	aa e7       	ldi	r26, 0x7A	; 122
    4090:	b0 e0       	ldi	r27, 0x00	; 0
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	0e 94 15 21 	call	0x422a	; 0x422a <__udivmodsi4>
    409a:	da 01       	movw	r26, r20
    409c:	c9 01       	movw	r24, r18
    409e:	01 97       	sbiw	r24, 0x01	; 1
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    40a4:	e0 e4       	ldi	r30, 0x40	; 64
    40a6:	f0 e0       	ldi	r31, 0x00	; 0
    40a8:	89 81       	ldd	r24, Y+1	; 0x01
    40aa:	9a 81       	ldd	r25, Y+2	; 0x02
    40ac:	89 2f       	mov	r24, r25
    40ae:	99 27       	eor	r25, r25
    40b0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    40b2:	e9 e2       	ldi	r30, 0x29	; 41
    40b4:	f0 e0       	ldi	r31, 0x00	; 0
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	80 83       	st	Z, r24
}
    40ba:	0f 90       	pop	r0
    40bc:	0f 90       	pop	r0
    40be:	0f 90       	pop	r0
    40c0:	0f 90       	pop	r0
    40c2:	cf 91       	pop	r28
    40c4:	df 91       	pop	r29
    40c6:	08 95       	ret

000040c8 <UART_sendByte>:

/*
 * Function responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    40c8:	df 93       	push	r29
    40ca:	cf 93       	push	r28
    40cc:	0f 92       	push	r0
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    40d4:	eb e2       	ldi	r30, 0x2B	; 43
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	88 2f       	mov	r24, r24
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	80 72       	andi	r24, 0x20	; 32
    40e0:	90 70       	andi	r25, 0x00	; 0
    40e2:	00 97       	sbiw	r24, 0x00	; 0
    40e4:	b9 f3       	breq	.-18     	; 0x40d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    40e6:	ec e2       	ldi	r30, 0x2C	; 44
    40e8:	f0 e0       	ldi	r31, 0x00	; 0
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    40ee:	0f 90       	pop	r0
    40f0:	cf 91       	pop	r28
    40f2:	df 91       	pop	r29
    40f4:	08 95       	ret

000040f6 <UART_recieveByte>:

/*
 * Function responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    40f6:	df 93       	push	r29
    40f8:	cf 93       	push	r28
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    40fe:	eb e2       	ldi	r30, 0x2B	; 43
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	88 23       	and	r24, r24
    4106:	dc f7       	brge	.-10     	; 0x40fe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    4108:	ec e2       	ldi	r30, 0x2C	; 44
    410a:	f0 e0       	ldi	r31, 0x00	; 0
    410c:	80 81       	ld	r24, Z
}
    410e:	cf 91       	pop	r28
    4110:	df 91       	pop	r29
    4112:	08 95       	ret

00004114 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    4114:	df 93       	push	r29
    4116:	cf 93       	push	r28
    4118:	00 d0       	rcall	.+0      	; 0x411a <UART_sendString+0x6>
    411a:	0f 92       	push	r0
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
    4120:	9b 83       	std	Y+3, r25	; 0x03
    4122:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4124:	19 82       	std	Y+1, r1	; 0x01
    4126:	0e c0       	rjmp	.+28     	; 0x4144 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	28 2f       	mov	r18, r24
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	8a 81       	ldd	r24, Y+2	; 0x02
    4130:	9b 81       	ldd	r25, Y+3	; 0x03
    4132:	fc 01       	movw	r30, r24
    4134:	e2 0f       	add	r30, r18
    4136:	f3 1f       	adc	r31, r19
    4138:	80 81       	ld	r24, Z
    413a:	0e 94 64 20 	call	0x40c8	; 0x40c8 <UART_sendByte>
		i++;
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	8f 5f       	subi	r24, 0xFF	; 255
    4142:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	28 2f       	mov	r18, r24
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	8a 81       	ldd	r24, Y+2	; 0x02
    414c:	9b 81       	ldd	r25, Y+3	; 0x03
    414e:	fc 01       	movw	r30, r24
    4150:	e2 0f       	add	r30, r18
    4152:	f3 1f       	adc	r31, r19
    4154:	80 81       	ld	r24, Z
    4156:	88 23       	and	r24, r24
    4158:	39 f7       	brne	.-50     	; 0x4128 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	0f 90       	pop	r0
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	08 95       	ret

00004166 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    4166:	0f 93       	push	r16
    4168:	1f 93       	push	r17
    416a:	df 93       	push	r29
    416c:	cf 93       	push	r28
    416e:	00 d0       	rcall	.+0      	; 0x4170 <UART_receiveString+0xa>
    4170:	0f 92       	push	r0
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	9b 83       	std	Y+3, r25	; 0x03
    4178:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    417a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	8a 81       	ldd	r24, Y+2	; 0x02
    4184:	9b 81       	ldd	r25, Y+3	; 0x03
    4186:	8c 01       	movw	r16, r24
    4188:	02 0f       	add	r16, r18
    418a:	13 1f       	adc	r17, r19
    418c:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    4190:	f8 01       	movw	r30, r16
    4192:	80 83       	st	Z, r24
    4194:	0f c0       	rjmp	.+30     	; 0x41b4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	28 2f       	mov	r18, r24
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	8a 81       	ldd	r24, Y+2	; 0x02
    41a4:	9b 81       	ldd	r25, Y+3	; 0x03
    41a6:	8c 01       	movw	r16, r24
    41a8:	02 0f       	add	r16, r18
    41aa:	13 1f       	adc	r17, r19
    41ac:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <UART_recieveByte>
    41b0:	f8 01       	movw	r30, r16
    41b2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	28 2f       	mov	r18, r24
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	9b 81       	ldd	r25, Y+3	; 0x03
    41be:	fc 01       	movw	r30, r24
    41c0:	e2 0f       	add	r30, r18
    41c2:	f3 1f       	adc	r31, r19
    41c4:	80 81       	ld	r24, Z
    41c6:	83 32       	cpi	r24, 0x23	; 35
    41c8:	31 f7       	brne	.-52     	; 0x4196 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    41ca:	89 81       	ldd	r24, Y+1	; 0x01
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
    41d2:	9b 81       	ldd	r25, Y+3	; 0x03
    41d4:	fc 01       	movw	r30, r24
    41d6:	e2 0f       	add	r30, r18
    41d8:	f3 1f       	adc	r31, r19
    41da:	10 82       	st	Z, r1
}
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	08 95       	ret

000041ec <__mulsi3>:
    41ec:	62 9f       	mul	r22, r18
    41ee:	d0 01       	movw	r26, r0
    41f0:	73 9f       	mul	r23, r19
    41f2:	f0 01       	movw	r30, r0
    41f4:	82 9f       	mul	r24, r18
    41f6:	e0 0d       	add	r30, r0
    41f8:	f1 1d       	adc	r31, r1
    41fa:	64 9f       	mul	r22, r20
    41fc:	e0 0d       	add	r30, r0
    41fe:	f1 1d       	adc	r31, r1
    4200:	92 9f       	mul	r25, r18
    4202:	f0 0d       	add	r31, r0
    4204:	83 9f       	mul	r24, r19
    4206:	f0 0d       	add	r31, r0
    4208:	74 9f       	mul	r23, r20
    420a:	f0 0d       	add	r31, r0
    420c:	65 9f       	mul	r22, r21
    420e:	f0 0d       	add	r31, r0
    4210:	99 27       	eor	r25, r25
    4212:	72 9f       	mul	r23, r18
    4214:	b0 0d       	add	r27, r0
    4216:	e1 1d       	adc	r30, r1
    4218:	f9 1f       	adc	r31, r25
    421a:	63 9f       	mul	r22, r19
    421c:	b0 0d       	add	r27, r0
    421e:	e1 1d       	adc	r30, r1
    4220:	f9 1f       	adc	r31, r25
    4222:	bd 01       	movw	r22, r26
    4224:	cf 01       	movw	r24, r30
    4226:	11 24       	eor	r1, r1
    4228:	08 95       	ret

0000422a <__udivmodsi4>:
    422a:	a1 e2       	ldi	r26, 0x21	; 33
    422c:	1a 2e       	mov	r1, r26
    422e:	aa 1b       	sub	r26, r26
    4230:	bb 1b       	sub	r27, r27
    4232:	fd 01       	movw	r30, r26
    4234:	0d c0       	rjmp	.+26     	; 0x4250 <__udivmodsi4_ep>

00004236 <__udivmodsi4_loop>:
    4236:	aa 1f       	adc	r26, r26
    4238:	bb 1f       	adc	r27, r27
    423a:	ee 1f       	adc	r30, r30
    423c:	ff 1f       	adc	r31, r31
    423e:	a2 17       	cp	r26, r18
    4240:	b3 07       	cpc	r27, r19
    4242:	e4 07       	cpc	r30, r20
    4244:	f5 07       	cpc	r31, r21
    4246:	20 f0       	brcs	.+8      	; 0x4250 <__udivmodsi4_ep>
    4248:	a2 1b       	sub	r26, r18
    424a:	b3 0b       	sbc	r27, r19
    424c:	e4 0b       	sbc	r30, r20
    424e:	f5 0b       	sbc	r31, r21

00004250 <__udivmodsi4_ep>:
    4250:	66 1f       	adc	r22, r22
    4252:	77 1f       	adc	r23, r23
    4254:	88 1f       	adc	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	1a 94       	dec	r1
    425a:	69 f7       	brne	.-38     	; 0x4236 <__udivmodsi4_loop>
    425c:	60 95       	com	r22
    425e:	70 95       	com	r23
    4260:	80 95       	com	r24
    4262:	90 95       	com	r25
    4264:	9b 01       	movw	r18, r22
    4266:	ac 01       	movw	r20, r24
    4268:	bd 01       	movw	r22, r26
    426a:	cf 01       	movw	r24, r30
    426c:	08 95       	ret

0000426e <__divmodsi4>:
    426e:	97 fb       	bst	r25, 7
    4270:	09 2e       	mov	r0, r25
    4272:	05 26       	eor	r0, r21
    4274:	0e d0       	rcall	.+28     	; 0x4292 <__divmodsi4_neg1>
    4276:	57 fd       	sbrc	r21, 7
    4278:	04 d0       	rcall	.+8      	; 0x4282 <__divmodsi4_neg2>
    427a:	d7 df       	rcall	.-82     	; 0x422a <__udivmodsi4>
    427c:	0a d0       	rcall	.+20     	; 0x4292 <__divmodsi4_neg1>
    427e:	00 1c       	adc	r0, r0
    4280:	38 f4       	brcc	.+14     	; 0x4290 <__divmodsi4_exit>

00004282 <__divmodsi4_neg2>:
    4282:	50 95       	com	r21
    4284:	40 95       	com	r20
    4286:	30 95       	com	r19
    4288:	21 95       	neg	r18
    428a:	3f 4f       	sbci	r19, 0xFF	; 255
    428c:	4f 4f       	sbci	r20, 0xFF	; 255
    428e:	5f 4f       	sbci	r21, 0xFF	; 255

00004290 <__divmodsi4_exit>:
    4290:	08 95       	ret

00004292 <__divmodsi4_neg1>:
    4292:	f6 f7       	brtc	.-4      	; 0x4290 <__divmodsi4_exit>
    4294:	90 95       	com	r25
    4296:	80 95       	com	r24
    4298:	70 95       	com	r23
    429a:	61 95       	neg	r22
    429c:	7f 4f       	sbci	r23, 0xFF	; 255
    429e:	8f 4f       	sbci	r24, 0xFF	; 255
    42a0:	9f 4f       	sbci	r25, 0xFF	; 255
    42a2:	08 95       	ret

000042a4 <__prologue_saves__>:
    42a4:	2f 92       	push	r2
    42a6:	3f 92       	push	r3
    42a8:	4f 92       	push	r4
    42aa:	5f 92       	push	r5
    42ac:	6f 92       	push	r6
    42ae:	7f 92       	push	r7
    42b0:	8f 92       	push	r8
    42b2:	9f 92       	push	r9
    42b4:	af 92       	push	r10
    42b6:	bf 92       	push	r11
    42b8:	cf 92       	push	r12
    42ba:	df 92       	push	r13
    42bc:	ef 92       	push	r14
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	1f 93       	push	r17
    42c4:	cf 93       	push	r28
    42c6:	df 93       	push	r29
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
    42cc:	ca 1b       	sub	r28, r26
    42ce:	db 0b       	sbc	r29, r27
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	09 94       	ijmp

000042dc <__epilogue_restores__>:
    42dc:	2a 88       	ldd	r2, Y+18	; 0x12
    42de:	39 88       	ldd	r3, Y+17	; 0x11
    42e0:	48 88       	ldd	r4, Y+16	; 0x10
    42e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    42e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    42e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    42e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    42ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    42ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    42ee:	b9 84       	ldd	r11, Y+9	; 0x09
    42f0:	c8 84       	ldd	r12, Y+8	; 0x08
    42f2:	df 80       	ldd	r13, Y+7	; 0x07
    42f4:	ee 80       	ldd	r14, Y+6	; 0x06
    42f6:	fd 80       	ldd	r15, Y+5	; 0x05
    42f8:	0c 81       	ldd	r16, Y+4	; 0x04
    42fa:	1b 81       	ldd	r17, Y+3	; 0x03
    42fc:	aa 81       	ldd	r26, Y+2	; 0x02
    42fe:	b9 81       	ldd	r27, Y+1	; 0x01
    4300:	ce 0f       	add	r28, r30
    4302:	d1 1d       	adc	r29, r1
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	ed 01       	movw	r28, r26
    4310:	08 95       	ret

00004312 <itoa>:
    4312:	fb 01       	movw	r30, r22
    4314:	9f 01       	movw	r18, r30
    4316:	e8 94       	clt
    4318:	42 30       	cpi	r20, 0x02	; 2
    431a:	c4 f0       	brlt	.+48     	; 0x434c <itoa+0x3a>
    431c:	45 32       	cpi	r20, 0x25	; 37
    431e:	b4 f4       	brge	.+44     	; 0x434c <itoa+0x3a>
    4320:	4a 30       	cpi	r20, 0x0A	; 10
    4322:	29 f4       	brne	.+10     	; 0x432e <itoa+0x1c>
    4324:	97 fb       	bst	r25, 7
    4326:	1e f4       	brtc	.+6      	; 0x432e <itoa+0x1c>
    4328:	90 95       	com	r25
    432a:	81 95       	neg	r24
    432c:	9f 4f       	sbci	r25, 0xFF	; 255
    432e:	64 2f       	mov	r22, r20
    4330:	77 27       	eor	r23, r23
    4332:	0e 94 ba 21 	call	0x4374	; 0x4374 <__udivmodhi4>
    4336:	80 5d       	subi	r24, 0xD0	; 208
    4338:	8a 33       	cpi	r24, 0x3A	; 58
    433a:	0c f0       	brlt	.+2      	; 0x433e <itoa+0x2c>
    433c:	89 5d       	subi	r24, 0xD9	; 217
    433e:	81 93       	st	Z+, r24
    4340:	cb 01       	movw	r24, r22
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	a1 f7       	brne	.-24     	; 0x432e <itoa+0x1c>
    4346:	16 f4       	brtc	.+4      	; 0x434c <itoa+0x3a>
    4348:	5d e2       	ldi	r21, 0x2D	; 45
    434a:	51 93       	st	Z+, r21
    434c:	10 82       	st	Z, r1
    434e:	c9 01       	movw	r24, r18
    4350:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <strrev>

00004354 <strrev>:
    4354:	dc 01       	movw	r26, r24
    4356:	fc 01       	movw	r30, r24
    4358:	67 2f       	mov	r22, r23
    435a:	71 91       	ld	r23, Z+
    435c:	77 23       	and	r23, r23
    435e:	e1 f7       	brne	.-8      	; 0x4358 <strrev+0x4>
    4360:	32 97       	sbiw	r30, 0x02	; 2
    4362:	04 c0       	rjmp	.+8      	; 0x436c <strrev+0x18>
    4364:	7c 91       	ld	r23, X
    4366:	6d 93       	st	X+, r22
    4368:	70 83       	st	Z, r23
    436a:	62 91       	ld	r22, -Z
    436c:	ae 17       	cp	r26, r30
    436e:	bf 07       	cpc	r27, r31
    4370:	c8 f3       	brcs	.-14     	; 0x4364 <strrev+0x10>
    4372:	08 95       	ret

00004374 <__udivmodhi4>:
    4374:	aa 1b       	sub	r26, r26
    4376:	bb 1b       	sub	r27, r27
    4378:	51 e1       	ldi	r21, 0x11	; 17
    437a:	07 c0       	rjmp	.+14     	; 0x438a <__udivmodhi4_ep>

0000437c <__udivmodhi4_loop>:
    437c:	aa 1f       	adc	r26, r26
    437e:	bb 1f       	adc	r27, r27
    4380:	a6 17       	cp	r26, r22
    4382:	b7 07       	cpc	r27, r23
    4384:	10 f0       	brcs	.+4      	; 0x438a <__udivmodhi4_ep>
    4386:	a6 1b       	sub	r26, r22
    4388:	b7 0b       	sbc	r27, r23

0000438a <__udivmodhi4_ep>:
    438a:	88 1f       	adc	r24, r24
    438c:	99 1f       	adc	r25, r25
    438e:	5a 95       	dec	r21
    4390:	a9 f7       	brne	.-22     	; 0x437c <__udivmodhi4_loop>
    4392:	80 95       	com	r24
    4394:	90 95       	com	r25
    4396:	bc 01       	movw	r22, r24
    4398:	cd 01       	movw	r24, r26
    439a:	08 95       	ret

0000439c <_exit>:
    439c:	f8 94       	cli

0000439e <__stop_program>:
    439e:	ff cf       	rjmp	.-2      	; 0x439e <__stop_program>
